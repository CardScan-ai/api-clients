name: Test API Clients

on:
  push:
    branches: [ main, enhanced-python-tests ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-python-client:
    name: Test Python Client
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Setup test environment
      working-directory: clients/cardscan-python
      run: echo "${{ secrets.TESTS_ENV_FILE }}" > test/.env
    
    - name: Install dependencies
      working-directory: clients/cardscan-python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        pip install pytest
    
    - name: Run serialization tests
      working-directory: clients/cardscan-python
      run: |
        PYTHONPATH=. pytest ../../tests/python/test_serialization.py -v
    
    - name: Run existing pipeline tests
      working-directory: clients/cardscan-python
      run: |
        PYTHONPATH=. pytest test/test_pipelines.py::test_invalid_api_key -v
        PYTHONPATH=. pytest test/test_pipelines.py::test_invalid_api_key_card_scanning -v

  test-python-sandbox:
    name: Test Python Client (Sandbox Integration)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Setup test environment
      working-directory: clients/cardscan-python
      run: echo "${{ secrets.TESTS_ENV_FILE }}" > test/.env
    
    - name: Install dependencies
      working-directory: clients/cardscan-python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        pip install pytest requests
    
    - name: Run sandbox integration tests
      working-directory: clients/cardscan-python
      run: |
        PYTHONPATH=. pytest ../../tests/python/test_live_sandbox.py -v

  test-typescript-client:
    name: Test TypeScript Client
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup test environment
      working-directory: clients/cardscan-ts
      run: echo "${{ secrets.TESTS_ENV_FILE }}" > .env
    
    - name: Install dependencies
      working-directory: clients/cardscan-ts
      run: |
        npm install
    
    - name: Install shared test dependencies
      working-directory: tests
      run: |
        npm install
    
    - name: Run TypeScript tests
      working-directory: tests
      run: |
        npm run test:typescript

  test-typescript-sandbox:
    name: Test TypeScript Client (Sandbox Integration)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup test environment
      working-directory: clients/cardscan-ts
      run: echo "${{ secrets.TESTS_ENV_FILE }}" > .env
    
    - name: Install dependencies
      working-directory: clients/cardscan-ts
      run: |
        npm install
    
    - name: Run sandbox integration tests
      working-directory: clients/cardscan-ts
      run: |
        npx jest ../../tests/typescript/test_live_sandbox.test.ts --verbose

  test-kotlin-client:
    name: Test Kotlin Client
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Run Kotlin client tests
      working-directory: clients/cardscan-kotlin
      run: |
        # Current tests are just stubs, but validate they compile
        ./gradlew test --info
    
  test-dart-client:
    name: Test Dart Client
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      working-directory: clients/cardscan-dart
      run: |
        dart pub get
    
    - name: Run Dart tests
      working-directory: clients/cardscan-dart
      run: |
        # Current tests are just stubs, but validate they compile
        dart test

  test-fixtures-consistency:
    name: Validate Test Fixtures
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Validate JSON fixtures
      run: |
        # Ensure all fixture files are valid JSON
        find tests/fixtures/api_responses -name "*.json" -exec python -m json.tool {} \; > /dev/null
        echo "✅ All API response fixtures are valid JSON"
        
        # Check for required fixtures
        required_fixtures=(
          "card_response_pending.json"
          "card_response_processing.json" 
          "card_response_snake_case.json"
          "card_response_with_payer_match.json"
          "card_response_with_backside.json"
          "card_response_error.json"
          "eligibility_response_processing.json"
          "eligibility_response_completed.json"
        )
        
        for fixture in "${required_fixtures[@]}"; do
          if [ -f "tests/fixtures/api_responses/$fixture" ]; then
            echo "✅ Found required fixture: $fixture"
          else
            echo "❌ Missing required fixture: $fixture"
            exit 1
          fi
        done
    
    - name: Validate test cards
      run: |
        # Ensure test card images exist
        test_cards=("front.jpg" "back.jpg")
        
        for card in "${test_cards[@]}"; do
          if [ -f "tests/fixtures/test_cards/$card" ]; then
            echo "✅ Found test card: $card"
          else
            echo "❌ Missing test card: $card"
            exit 1
          fi
        done

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-python-client, test-typescript-client, test-kotlin-client, test-dart-client, test-fixtures-consistency]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Client | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Python | ${{ needs.test-python-client.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| TypeScript | ${{ needs.test-typescript-client.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Kotlin | ${{ needs.test-kotlin-client.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dart | ${{ needs.test-dart-client.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Fixtures | ${{ needs.test-fixtures-consistency.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** Sandbox integration tests run only on main branch pushes or manual dispatch." >> $GITHUB_STEP_SUMMARY