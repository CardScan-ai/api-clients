# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class CompositeMedicalProcedureIdentifier(BaseModel):
    """
    CompositeMedicalProcedureIdentifier  # noqa: E501
    """
    product_or_service_id_qualifier_code: Optional[StrictStr] = Field(None, alias="productOrServiceIdQualifierCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB13-1, Notes: Product or Service ID Qualifier Code")
    product_or_service_id_qualifier: Optional[StrictStr] = Field(None, alias="productOrServiceIdQualifier", description="Loop: 2110C and 2110D, Segments: EB, Element: EB13-1, Notes: Product or Service ID Qualifier")
    procedure_code: Optional[StrictStr] = Field(None, alias="procedureCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB13-2, Notes: Procedure Code")
    procedure_modifiers: Optional[conlist(StrictStr)] = Field(None, alias="procedureModifiers", description="Loop: 2110C and 2110D, Segments: EB, Element: EB13-3-6, Notes: ProcedureModifier")
    product_or_service_id: Optional[StrictStr] = Field(None, alias="productOrServiceID", description="Loop: 2110C and 2110D, Segments: EB, Element: EB13-8, Notes: Product or Service ID")
    diagnosis_code_pointer: Optional[conlist(StrictStr)] = Field(None, alias="diagnosisCodePointer", description="Loop: 2110C and 2110D, Segments: EB, Element: EB14-1-4, Notes: DiagnosisCodePointer")
    additional_properties: Dict[str, Any] = {}
    __properties = ["productOrServiceIdQualifierCode", "productOrServiceIdQualifier", "procedureCode", "procedureModifiers", "productOrServiceID", "diagnosisCodePointer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompositeMedicalProcedureIdentifier:
        """Create an instance of CompositeMedicalProcedureIdentifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompositeMedicalProcedureIdentifier:
        """Create an instance of CompositeMedicalProcedureIdentifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompositeMedicalProcedureIdentifier.parse_obj(obj)

        _obj = CompositeMedicalProcedureIdentifier.parse_obj({
            "product_or_service_id_qualifier_code": obj.get("productOrServiceIdQualifierCode"),
            "product_or_service_id_qualifier": obj.get("productOrServiceIdQualifier"),
            "procedure_code": obj.get("procedureCode"),
            "procedure_modifiers": obj.get("procedureModifiers"),
            "product_or_service_id": obj.get("productOrServiceID"),
            "diagnosis_code_pointer": obj.get("diagnosisCodePointer")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


