# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.additional_information import AdditionalInformation
from openapi_client.models.benefits_additional_information import BenefitsAdditionalInformation
from openapi_client.models.benefits_date_information import BenefitsDateInformation
from openapi_client.models.benefits_related_entity import BenefitsRelatedEntity
from openapi_client.models.benefits_service_delivery import BenefitsServiceDelivery
from openapi_client.models.composite_medical_procedure_identifier import CompositeMedicalProcedureIdentifier
from openapi_client.models.eligibility_additional_information import EligibilityAdditionalInformation

class BenefitsInformation(BaseModel):
    """
    BenefitsInformation  # noqa: E501
    """
    code: Optional[StrictStr] = Field(None, description="Loop: 2110C and 2110D, Segments: EB, Element: EB01, Notes: Eligibility or Benefit Information Code")
    name: Optional[StrictStr] = Field(None, description="Loop: 2110C and 2110D, Segments: EB, Element: EB01, Notes: Eligibility or Benefit Information Code")
    coverage_level_code: Optional[StrictStr] = Field(None, alias="coverageLevelCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB02, Notes: Coverage Level Code")
    coverage_level: Optional[StrictStr] = Field(None, alias="coverageLevel", description="Loop: 2110C and 2110D, Segments: EB, Element: EB02, Notes: Coverage Level")
    service_type_codes: Optional[conlist(StrictStr)] = Field(None, alias="serviceTypeCodes", description="Loop: 2110C and 2110D, Segments: EB, Element: EB03, Notes: Service Type Codes")
    service_types: Optional[conlist(StrictStr)] = Field(None, alias="serviceTypes", description="Loop: 2110C and 2110D, Segments: EB, Element: EB03, Notes: Service Types")
    insurance_type_code: Optional[StrictStr] = Field(None, alias="insuranceTypeCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB04, Notes: Insurance Type Code")
    insurance_type: Optional[StrictStr] = Field(None, alias="insuranceType", description="Loop: 2110C and 2110D, Segments: EB, Element: EB04, Notes: Insurance Type")
    plan_coverage: Optional[StrictStr] = Field(None, alias="planCoverage", description="Loop: 2110C and 2110D, Segments: EB, Element: EB05, Notes: Plan Coverage Description")
    time_qualifier_code: Optional[StrictStr] = Field(None, alias="timeQualifierCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB06, Notes: Time Period Qualifier Code")
    time_qualifier: Optional[StrictStr] = Field(None, alias="timeQualifier", description="Loop: 2110C and 2110D, Segments: EB, Element: EB06, Notes: Time Period Qualifier")
    benefit_amount: Optional[StrictStr] = Field(None, alias="benefitAmount", description="Loop: 2110C and 2110D, Segments: EB, Element: EB07, Notes: Monetary Amount")
    benefit_percent: Optional[StrictStr] = Field(None, alias="benefitPercent", description="Loop: 2110C and 2110D, Segments: EB, Element: EB08, Notes: Percentage as Decimal")
    quantity_qualifier_code: Optional[StrictStr] = Field(None, alias="quantityQualifierCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB09, Notes: Quantity Qualifier Code")
    quantity_qualifier: Optional[StrictStr] = Field(None, alias="quantityQualifier", description="Loop: 2110C and 2110D, Segments: EB, Element: EB09, Notes: Quantity Qualifier")
    benefit_quantity: Optional[StrictStr] = Field(None, alias="benefitQuantity", description="Loop: 2110C and 2110D, Segments: EB, Element: EB10, Notes: Quantity")
    auth_or_cert_indicator: Optional[StrictStr] = Field(None, alias="authOrCertIndicator", description="Loop: 2110C and 2110D, Segments: EB, Element: EB11, Notes: Yes/No Condition or Response Code")
    in_plan_network_indicator_code: Optional[StrictStr] = Field(None, alias="inPlanNetworkIndicatorCode", description="Loop: 2110C and 2110D, Segments: EB, Element: EB12, Notes: Yes/No Condition or Response Code")
    in_plan_network_indicator: Optional[StrictStr] = Field(None, alias="inPlanNetworkIndicator", description="Loop: 2110C and 2110D, Segments: EB, Element: EB12, Notes: Yes/No Condition or Response")
    header_loop_identifier_code: Optional[StrictStr] = Field(None, alias="headerLoopIdentifierCode", description="Loop: 2110C and 2110D, Segments: LS, Element: LS01, Notes: Loop Identifier Code")
    trailer_loop_identifier_code: Optional[StrictStr] = Field(None, alias="trailerLoopIdentifierCode", description="Loop: 2110C and 2110D, Segments: LE, Element: LE01, Notes: Loop Identifier Code")
    composite_medical_procedure_identifier: Optional[CompositeMedicalProcedureIdentifier] = Field(None, alias="compositeMedicalProcedureIdentifier")
    benefits_additional_information: Optional[BenefitsAdditionalInformation] = Field(None, alias="benefitsAdditionalInformation")
    benefits_date_information: Optional[BenefitsDateInformation] = Field(None, alias="benefitsDateInformation")
    benefits_related_entity: Optional[BenefitsRelatedEntity] = Field(None, alias="benefitsRelatedEntity")
    benefits_related_entities: Optional[conlist(BenefitsRelatedEntity)] = Field(None, alias="benefitsRelatedEntities", description="Loop: 2120C and 2120D, Segments: NM1, N3, N4, PER, PRV, Notes: All occurrence of SUBSCRIBER/DEPENDENT BENEFIT RELATED ENTITY")
    benefits_service_delivery: Optional[conlist(BenefitsServiceDelivery)] = Field(None, alias="benefitsServiceDelivery")
    additional_information: Optional[conlist(AdditionalInformation)] = Field(None, alias="additionalInformation")
    eligibility_additional_information: Optional[EligibilityAdditionalInformation] = Field(None, alias="eligibilityAdditionalInformation")
    eligibility_additional_information_list: Optional[conlist(EligibilityAdditionalInformation)] = Field(None, alias="eligibilityAdditionalInformationList", description="Loop: 2115C and 2115D, Segments: III Notes: all occurrences")
    additional_properties: Dict[str, Any] = {}
    __properties = ["code", "name", "coverageLevelCode", "coverageLevel", "serviceTypeCodes", "serviceTypes", "insuranceTypeCode", "insuranceType", "planCoverage", "timeQualifierCode", "timeQualifier", "benefitAmount", "benefitPercent", "quantityQualifierCode", "quantityQualifier", "benefitQuantity", "authOrCertIndicator", "inPlanNetworkIndicatorCode", "inPlanNetworkIndicator", "headerLoopIdentifierCode", "trailerLoopIdentifierCode", "compositeMedicalProcedureIdentifier", "benefitsAdditionalInformation", "benefitsDateInformation", "benefitsRelatedEntity", "benefitsRelatedEntities", "benefitsServiceDelivery", "additionalInformation", "eligibilityAdditionalInformation", "eligibilityAdditionalInformationList"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BenefitsInformation:
        """Create an instance of BenefitsInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of composite_medical_procedure_identifier
        if self.composite_medical_procedure_identifier:
            _dict['compositeMedicalProcedureIdentifier'] = self.composite_medical_procedure_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of benefits_additional_information
        if self.benefits_additional_information:
            _dict['benefitsAdditionalInformation'] = self.benefits_additional_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of benefits_date_information
        if self.benefits_date_information:
            _dict['benefitsDateInformation'] = self.benefits_date_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of benefits_related_entity
        if self.benefits_related_entity:
            _dict['benefitsRelatedEntity'] = self.benefits_related_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in benefits_related_entities (list)
        _items = []
        if self.benefits_related_entities:
            for _item in self.benefits_related_entities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['benefitsRelatedEntities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in benefits_service_delivery (list)
        _items = []
        if self.benefits_service_delivery:
            for _item in self.benefits_service_delivery:
                if _item:
                    _items.append(_item.to_dict())
            _dict['benefitsServiceDelivery'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_information (list)
        _items = []
        if self.additional_information:
            for _item in self.additional_information:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalInformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of eligibility_additional_information
        if self.eligibility_additional_information:
            _dict['eligibilityAdditionalInformation'] = self.eligibility_additional_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in eligibility_additional_information_list (list)
        _items = []
        if self.eligibility_additional_information_list:
            for _item in self.eligibility_additional_information_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eligibilityAdditionalInformationList'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BenefitsInformation:
        """Create an instance of BenefitsInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BenefitsInformation.parse_obj(obj)

        _obj = BenefitsInformation.parse_obj({
            "code": obj.get("code"),
            "name": obj.get("name"),
            "coverage_level_code": obj.get("coverageLevelCode"),
            "coverage_level": obj.get("coverageLevel"),
            "service_type_codes": obj.get("serviceTypeCodes"),
            "service_types": obj.get("serviceTypes"),
            "insurance_type_code": obj.get("insuranceTypeCode"),
            "insurance_type": obj.get("insuranceType"),
            "plan_coverage": obj.get("planCoverage"),
            "time_qualifier_code": obj.get("timeQualifierCode"),
            "time_qualifier": obj.get("timeQualifier"),
            "benefit_amount": obj.get("benefitAmount"),
            "benefit_percent": obj.get("benefitPercent"),
            "quantity_qualifier_code": obj.get("quantityQualifierCode"),
            "quantity_qualifier": obj.get("quantityQualifier"),
            "benefit_quantity": obj.get("benefitQuantity"),
            "auth_or_cert_indicator": obj.get("authOrCertIndicator"),
            "in_plan_network_indicator_code": obj.get("inPlanNetworkIndicatorCode"),
            "in_plan_network_indicator": obj.get("inPlanNetworkIndicator"),
            "header_loop_identifier_code": obj.get("headerLoopIdentifierCode"),
            "trailer_loop_identifier_code": obj.get("trailerLoopIdentifierCode"),
            "composite_medical_procedure_identifier": CompositeMedicalProcedureIdentifier.from_dict(obj.get("compositeMedicalProcedureIdentifier")) if obj.get("compositeMedicalProcedureIdentifier") is not None else None,
            "benefits_additional_information": BenefitsAdditionalInformation.from_dict(obj.get("benefitsAdditionalInformation")) if obj.get("benefitsAdditionalInformation") is not None else None,
            "benefits_date_information": BenefitsDateInformation.from_dict(obj.get("benefitsDateInformation")) if obj.get("benefitsDateInformation") is not None else None,
            "benefits_related_entity": BenefitsRelatedEntity.from_dict(obj.get("benefitsRelatedEntity")) if obj.get("benefitsRelatedEntity") is not None else None,
            "benefits_related_entities": [BenefitsRelatedEntity.from_dict(_item) for _item in obj.get("benefitsRelatedEntities")] if obj.get("benefitsRelatedEntities") is not None else None,
            "benefits_service_delivery": [BenefitsServiceDelivery.from_dict(_item) for _item in obj.get("benefitsServiceDelivery")] if obj.get("benefitsServiceDelivery") is not None else None,
            "additional_information": [AdditionalInformation.from_dict(_item) for _item in obj.get("additionalInformation")] if obj.get("additionalInformation") is not None else None,
            "eligibility_additional_information": EligibilityAdditionalInformation.from_dict(obj.get("eligibilityAdditionalInformation")) if obj.get("eligibilityAdditionalInformation") is not None else None,
            "eligibility_additional_information_list": [EligibilityAdditionalInformation.from_dict(_item) for _item in obj.get("eligibilityAdditionalInformationList")] if obj.get("eligibilityAdditionalInformationList") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


