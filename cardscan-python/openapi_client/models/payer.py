# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.contact_information import ContactInformation
from openapi_client.models.eligibility_api_error import EligibilityApiError

class Payer(BaseModel):
    """
    Payer  # noqa: E501
    """
    entity_identifier: Optional[StrictStr] = Field(None, alias="entityIdentifier", description="Loop: 2100A, Segments: NM1, Element: NM101 Notes: Entity Identifier Code")
    entity_type: Optional[StrictStr] = Field(None, alias="entityType", description="Loop: 2100A, Segments: NM1, Element: NM102 Notes: Entity Type Qualifier")
    first_name: Optional[StrictStr] = Field(None, alias="firstName", description="Loop: 2100A, Segments: NM1, Element: NM104 Notes: Name First")
    last_name: Optional[StrictStr] = Field(None, alias="lastName", description="Loop: 2100A, Segments: NM1, Element: NM103 Notes: Name Last")
    name: Optional[StrictStr] = Field(None, description="Loop: 2100A, Segments: NM1, Element: NM103 Notes: Organization Name")
    middle_name: Optional[StrictStr] = Field(None, alias="middleName", description="Loop: 2100A, Segments: NM1, Element: NM105 Notes: Name Middle")
    suffix: Optional[StrictStr] = Field(None, description="Loop: 2100A, Segments: NM1, Element: NM107 Notes: Name Suffix")
    employers_id: Optional[StrictStr] = Field(None, alias="employersId", description="Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=24 Employer's Identification Number")
    federal_taxpayers_id_number: Optional[StrictStr] = Field(None, alias="federalTaxpayersIdNumber", description="Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=FI Federal Taxpayer's Identification Number")
    naic: Optional[StrictStr] = Field(None, description="Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=NI National Association of Insurance Commissioners (NAIC) Identification")
    npi: Optional[StrictStr] = Field(None, description="Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=XX Centers for Medicare and Medicaid Services National Provider Identifier")
    centers_for_medicare_and_medicaid_plan_id: Optional[StrictStr] = Field(None, alias="centersForMedicareAndMedicaidPlanId", description="Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=XV Centers for Medicare and Medicaid Services PlanID")
    payor_identification: Optional[StrictStr] = Field(None, alias="payorIdentification", description="Loop: 2100A, Segments: NM1, Element: NM109 Notes: NM108=PI Payor Identification")
    contact_information: Optional[ContactInformation] = Field(None, alias="contactInformation")
    aaa_errors: Optional[conlist(EligibilityApiError)] = Field(None, alias="aaaErrors")
    etin: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["entityIdentifier", "entityType", "firstName", "lastName", "name", "middleName", "suffix", "employersId", "federalTaxpayersIdNumber", "naic", "npi", "centersForMedicareAndMedicaidPlanId", "payorIdentification", "contactInformation", "aaaErrors", "etin"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Payer:
        """Create an instance of Payer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of contact_information
        if self.contact_information:
            _dict['contactInformation'] = self.contact_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in aaa_errors (list)
        _items = []
        if self.aaa_errors:
            for _item in self.aaa_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['aaaErrors'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Payer:
        """Create an instance of Payer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Payer.parse_obj(obj)

        _obj = Payer.parse_obj({
            "entity_identifier": obj.get("entityIdentifier"),
            "entity_type": obj.get("entityType"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "name": obj.get("name"),
            "middle_name": obj.get("middleName"),
            "suffix": obj.get("suffix"),
            "employers_id": obj.get("employersId"),
            "federal_taxpayers_id_number": obj.get("federalTaxpayersIdNumber"),
            "naic": obj.get("naic"),
            "npi": obj.get("npi"),
            "centers_for_medicare_and_medicaid_plan_id": obj.get("centersForMedicareAndMedicaidPlanId"),
            "payor_identification": obj.get("payorIdentification"),
            "contact_information": ContactInformation.from_dict(obj.get("contactInformation")) if obj.get("contactInformation") is not None else None,
            "aaa_errors": [EligibilityApiError.from_dict(_item) for _item in obj.get("aaaErrors")] if obj.get("aaaErrors") is not None else None,
            "etin": obj.get("etin")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


