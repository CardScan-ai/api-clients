# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictStr

class UploadParameters(BaseModel):
    """
    UploadParameters
    """
    key: StrictStr = Field(..., description="The key of the file")
    x_amz_algorithm: StrictStr = Field(..., alias="x-amz-algorithm", description="The algorithm used to sign the request")
    x_amz_credential: StrictStr = Field(..., alias="x-amz-credential", description="The credential used to sign the request")
    x_amz_date: StrictStr = Field(..., alias="x-amz-date", description="The date of the request")
    x_amz_security_token: StrictStr = Field(..., alias="x-amz-security-token", description="The security token used to sign the request")
    policy: StrictStr = Field(..., description="The policy used to sign the request")
    x_amz_signature: StrictStr = Field(..., alias="x-amz-signature", description="The signature used to sign the request")
    additional_properties: Dict[str, Any] = {}
    __properties = ["key", "x-amz-algorithm", "x-amz-credential", "x-amz-date", "x-amz-security-token", "policy", "x-amz-signature"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UploadParameters:
        """Create an instance of UploadParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UploadParameters:
        """Create an instance of UploadParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UploadParameters.parse_obj(obj)

        _obj = UploadParameters.parse_obj({
            "key": obj.get("key"),
            "x_amz_algorithm": obj.get("x-amz-algorithm"),
            "x_amz_credential": obj.get("x-amz-credential"),
            "x_amz_date": obj.get("x-amz-date"),
            "x_amz_security_token": obj.get("x-amz-security-token"),
            "policy": obj.get("policy"),
            "x_amz_signature": obj.get("x-amz-signature")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


