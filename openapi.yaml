openapi: 3.0.0
info:
  title: CardScan API
  description: The official documentation for the CardScan API Clients.
  version: 1.0.0
servers:
- url: https://{prefix}.cardscan.ai/{version}
  description: API Server
  variables:
    version:
      default: v1
      description: The version of the API
    prefix:
      description: The api environment to use as a prefix, e.g. api, sandbox
      default: sandbox
      enum:
      - api
      - sandbox
tags:
- name: CardScan
paths:
  /access-token:
    get:
      tags:
      - CardScan
      summary: Access Token
      operationId: getAccessToken
      security:
      - bearerAuth: []
      parameters:
      - name: user_id
        description: The ID of the user
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                - Token
                - IdentityId
                properties:
                  Token:
                    type: string
                    description: The access token.
                  IdentityId:
                    type: string
                    description: The identity ID.
                  session_id:
                    type: string
                    description: The session ID.
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /cards/{card_id}:
    delete:
      tags:
      - CardScan
      summary: Delete Card
      operationId: deleteCardById
      security:
      - bearerAuth: []
      parameters:
      - name: card_id
        description: The ID of the card
        in: path
        schema:
          type: string
          format: uuid
        required: true
      responses:
        '204':
          description: Card was successfully deleted
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '403':
          description: Forbidden
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Card not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
    get:
      tags:
      - CardScan
      summary: Get Card by ID
      operationId: getCardById
      security:
      - bearerAuth: []
      parameters:
      - name: card_id
        description: The ID of the card
        in: path
        schema:
          type: string
          format: uuid
        required: true
      responses:
        '200':
          $ref: '#/components/responses/CardResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '403':
          description: Forbidden
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Card not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /cards/search:
    get:
      tags:
      - CardScan
      summary: Search Cards (200) OK
      operationId: searchCards
      security:
      - bearerAuth: []
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
      - name: cursor
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                - cards
                - response_metadata
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardApiResponse'
                  response_metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /cards:
    get:
      tags:
      - CardScan
      summary: List Cards
      operationId: listCards
      security:
      - bearerAuth: []
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: cursor
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                - cards
                - response_metadata
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardApiResponse'
                  response_metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
    post:
      tags:
      - CardScan
      summary: Creates a new card
      operationId: createCard
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enable_backside_scan:
                  type: boolean
                  default: false
                  description: Whether to enable backside scanning
                enable_livescan:
                  type: boolean
                  default: false
                  description: Whether to enable live scanning
                backside:
                  type: object
                  properties:
                    scanning:
                      type: string
                      default: disabled
                      enum:
                      - required
                      - optional
                      - disabled
                      description: The scanning mode
                metadata:
                  type: object
      responses:
        '201':
          $ref: '#/components/responses/CardResponse'
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /cards/{card_id}/upload:
    post:
      tags:
      - CardScan
      summary: Direct Upload
      operationId: directUpload
      requestBody:
        content:
          image/jpeg:
            schema:
              oneOf:
              - type: string
                format: base64
              - type: string
                format: binary
      security:
      - bearerAuth: []
      parameters:
      - name: orientation
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ScanOrientation'
      - name: capture_type
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ScanCaptureType'
      - name: card_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                - card_id
                - scan_id
                - metadata
                properties:
                  card_id:
                    type: string
                    format: uuid
                  scan_id:
                    type: string
                    format: uuid
                  metadata:
                    type: object
                    properties:
                      ocr_latency:
                        type: string
                        description: OCR latency in milliseconds
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '403':
          description: Forbidden
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Card not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /cards/{card_id}/performance:
    post:
      tags:
      - CardScan
      summary: Card - Send performance data
      operationId: cardPerformance
      requestBody:
        content:
          application/json:
            schema:
              type: object
      parameters:
      - name: card_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '403':
          description: Forbidden
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Card not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /cards/{card_id}/generate-upload-url:
    post:
      tags:
      - CardScan
      summary: Card - Generate Upload URL
      operationId: generateCardUploadUrl
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - orientation
              properties:
                orientation:
                  $ref: '#/components/schemas/ScanOrientation'
                capture_type:
                  $ref: '#/components/schemas/ScanCaptureType'
                metadata:
                  $ref: '#/components/schemas/ScanMetadata'
      security:
      - bearerAuth: []
      parameters:
      - name: card_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: expiration
        in: query
        schema:
          type: integer
          minimum: 100
          maximum: 3600
          default: 3600
        required: false
      responses:
        '200':
          $ref: '#/components/responses/UploadUrlResponse'
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '403':
          description: Forbidden
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Card not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /scans/{scan_id}/metadata:
    post:
      tags:
      - CardScan
      summary: Set Scan Metadata
      operationId: setScanMetadata
      security:
      - bearerAuth: []
      parameters:
      - name: scan_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '403':
          description: Forbidden
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Scan not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /generate-upload-url:
    get:
      tags:
      - CardScan
      summary: Generate an upload URL
      operationId: generateUploadUrl
      security:
      - bearerAuth: []
      parameters:
      - name: expiration
        in: query
        schema:
          type: integer
          minimum: 100
          maximum: 3600
        required: true
      responses:
        '200':
          $ref: '#/components/responses/UploadUrlResponse'
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /eligibility/{eligibility_id}:
    get:
      tags:
      - CardScan
      summary: Get Eligibility
      operationId: getEligibilityById
      security:
      - bearerAuth: []
      parameters:
      - name: eligibility_id
        in: path
        schema:
          type: string
        required: true
      responses:
        '200':
          description: A single eligibility record
          $ref: '#/components/responses/EligibilityResponse'
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Eligibility record not found
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /eligibility:
    get:
      tags:
      - CardScan
      summary: List Eligibility
      operationId: listEligibility
      security:
      - bearerAuth: []
      parameters:
      - name: limit
        in: query
        schema:
          type: integer
      - name: cursor
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                - eligibility_requests
                - response_metadata
                properties:
                  eligibility_requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/EligibilityApiResponse'
                  response_metadata:
                    $ref: '#/components/schemas/ResponseMetadata'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
    post:
      tags:
      - CardScan
      summary: Create Eligibility Record
      operationId: createEligibility
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - eligibility
              - card_id
              properties:
                eligibility:
                  $ref: '#/components/schemas/EligibilityInfo'
                card_id:
                  type: string
                  format: uuid
                  description: The ID of the card.
      security:
      - bearerAuth: []
      responses:
        '201':
          description: Eligibility record created
          $ref: '#/components/responses/EligibilityResponse'
        '400':
          description: Missing properties in the request body
          $ref: '#/components/responses/ApiErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          $ref: '#/components/responses/ApiErrorResponse'
          description: Card not found
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /generate-magic-link:
    get:
      tags:
      - CardScan
      operationId: generateMagicLink
      summary: Generate Magic Link
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Generates a magic link
          content:
            application/json:
              schema:
                type: object
                required:
                - magic_link
                - token
                - expires_at
                properties:
                  magic_link:
                    type: string
                    format: uri
                    description: The URL of the magic link
                  token:
                    type: string
                    description: The token associated with the magic link
                  expires_at:
                    type: string
                    format: date-time
                    description: The expiration date and time of the magic link
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
  /validate-magic-link:
    get:
      tags:
      - CardScan
      summary: Validate Magic Link
      operationId: validateMagicLink
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                - Token
                - IdentityId
                properties:
                  Token:
                    type: string
                    description: The token associated with the magic link
                  IdentityId:
                    type: string
                    description: The identity ID.
        '400':
          description: Bad request
          $ref: '#/components/responses/ApiErrorResponse'
        '404':
          description: Magic link not found
          $ref: '#/components/responses/ApiErrorResponse'
        '410':
          description: Magic link expired
          $ref: '#/components/responses/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/ApiInternalErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    ApiErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
    ApiInternalErrorResponse:
      description: Internal Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A message describing the error.
    EligibilityResponse:
      description: Successful eligibility response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EligibilityApiResponse'
    CardResponse:
      description: Successful card response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardApiResponse'
    UploadUrlResponse:
      description: Successful upload URL response
      content:
        application/json:
          schema:
            type: object
            required:
            - upload_url
            - upload_parameters
            - card_id
            - scan_id
            properties:
              card_id:
                type: string
                format: uuid
              scan_id:
                type: string
                format: uuid
              upload_url:
                type: string
                format: uri
                description: The URL to upload the card image.
              upload_parameters:
                $ref: '#/components/schemas/UploadParameters'
  schemas:
    # ----------------- Cardscan eligibility API Components -----------------
    ProviderDto:
      type: object
      required:
        - npi
      description: >
        A valid provider record must include either an `organization_name` or both a `first_name` and `last_name`. 
        The `npi` must always be exactly 10 numeric digits.
      properties:
        first_name:
          type: string
          maxLength: 35
          minLength: 1
          description: >
            The provider's first name. Required if `organization_name` is not provided. 
            Must contain 1-35 alphanumeric characters. 

        last_name:
          type: string
          maxLength: 60
          minLength: 1
          description: >
            The provider's last name. Required if `organization_name` is not provided. 
            Must contain 1-60 alphanumeric characters.

        npi:
          type: string
          pattern: '^\d{10}$'
          description: >
            The National Provider Identifier (NPI), assigned by the Centers for Medicare & Medicaid Services. 
            This identifier is always a 10-digit numeric value. 
            Use the [NPI Registry](https://npiregistry.cms.hhs.gov/search) to verify or look up NPI details.

        organization_name:
          type: string
          maxLength: 60
          minLength: 0
          description: >
            The name of the provider's organization. Required if both `first_name` and `last_name` are not provided. 
            Must contain up to 60 characters.

    SubscriberDto:
      type: object
      required:
        - first_name
        - last_name
        - date_of_birth
      properties:
        first_name:
          type: string
          maxLength: 35
          minLength: 1
          description: >
            The subscriber's first name. Required and must contain 1-35 alphanumeric characters. 
            Use this for accurate identification of the subscriber.

        last_name:
          type: string
          maxLength: 60
          minLength: 1
          description: >
            The subscriber's last name. Required and must contain 1-60 alphanumeric characters. 
            This field is critical for matching subscriber records.

        date_of_birth:
          type: string
          description: >
            The subscriber's date of birth, formatted as YYYYMMDD. 
            Required for validation and eligibility checks. 
            Example: '19800101'

    EligibilityInfo:
      type: object
      required:
      - provider
      - subscriber
      properties:
        provider:
          $ref: '#/components/schemas/ProviderDto'
        subscriber:
          $ref: '#/components/schemas/SubscriberDto'
    EligibilityApiResponse:
      type: object
      required:
      - eligibility_id
      - state
      - card_id
      - created_at
      properties:
        eligibility_id:
          type: string
          format: uuid
          description: The ID of the eligibility record.
        state:
          type: string
          enum:
          - completed
          - processing
          - error
          description: The state of the eligibility record.
        card_id:
          type: string
          format: uuid
          description: The ID of the card.
        eligibility_request:
          type: object
          description: The eligibility request.
          properties:
            control_number:
              type: string
              description: The control number of the claim.
              nullable: false
            trading_partner_service_id:
              type: string
              description: The ID of the trading partner service.
              nullable: false
            provider:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                organization_name:
                  type: string
                npi:
                  type: string
            subscriber:
              type: object
              properties:
                first_name:
                  type: string
                  description: The first name of the subscriber.
                last_name:
                  type: string
                  description: The last name of the subscriber.
                member_id:
                  type: string
                  description: The member ID of the subscriber.
                date_of_birth:
                  type: string
                  description: The date of birth of the subscriber.
        eligibility_response:
          type: object
          additionalProperties: true
          nullable: true
          description: The eligibility raw response.
        eligibility_summarized_response:
          $ref: '#/components/schemas/EligibilitySummarizedResponse'
          nullable: true
        error:
          $ref: '#/components/schemas/ModelError'
        created_at:
          type: string
          format: date-time
          description: The timestamp when the eligibility record was created.
    EligibilitySummarizedResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/EligibilityError'
        subscriber_details:
          $ref: '#/components/schemas/SubscriberDetails'
        payer_details:
          $ref: '#/components/schemas/PayerDetails'
        plan_details:
          $ref: '#/components/schemas/PlanDetails'
        coverage_summary:
          $ref: '#/components/schemas/CoverageSummary'
        abortion:
          $ref: '#/components/schemas/Service'
        acupuncture:
          $ref: '#/components/schemas/Service'
        adjunctive_dental_services:
          $ref: '#/components/schemas/Service'
        aids:
          $ref: '#/components/schemas/Service'
        air_transportation:
          $ref: '#/components/schemas/Service'
        alcoholism:
          $ref: '#/components/schemas/Service'
        allergy:
          $ref: '#/components/schemas/Service'
        allergy_testing:
          $ref: '#/components/schemas/Service'
        alternate_method_dialysis:
          $ref: '#/components/schemas/Service'
        ambulatory_service_center_facility:
          $ref: '#/components/schemas/Service'
        anesthesia:
          $ref: '#/components/schemas/Service'
        anesthesiologist:
          $ref: '#/components/schemas/Service'
        audiology_exam:
          $ref: '#/components/schemas/Service'
        blood_charges:
          $ref: '#/components/schemas/Service'
        brand_name_prescription_drug:
          $ref: '#/components/schemas/Service'
        brand_name_prescription_drug_formulary:
          $ref: '#/components/schemas/Service'
        brand_name_prescription_drug_non_formulary:
          $ref: '#/components/schemas/Service'
        burn_care:
          $ref: '#/components/schemas/Service'
        cabulance:
          $ref: '#/components/schemas/Service'
        cancer:
          $ref: '#/components/schemas/Service'
        cardiac:
          $ref: '#/components/schemas/Service'
        cardiac_rehabilitation:
          $ref: '#/components/schemas/Service'
        case_management:
          $ref: '#/components/schemas/Service'
        chemotherapy:
          $ref: '#/components/schemas/Service'
        chiropractic:
          $ref: '#/components/schemas/Service'
        chiropractic_office_visits:
          $ref: '#/components/schemas/Service'
        chronic_renal_disease_crd_equipment:
          $ref: '#/components/schemas/Service'
        cognitive_therapy:
          $ref: '#/components/schemas/Service'
        consultation:
          $ref: '#/components/schemas/Service'
        coronary_care:
          $ref: '#/components/schemas/Service'
        day_care_psychiatric:
          $ref: '#/components/schemas/Service'
        dental_accident:
          $ref: '#/components/schemas/Service'
        dental_care:
          $ref: '#/components/schemas/Service'
        dental_crowns:
          $ref: '#/components/schemas/Service'
        dermatology:
          $ref: '#/components/schemas/Service'
        diabetic_supplies:
          $ref: '#/components/schemas/Service'
        diagnostic_dental:
          $ref: '#/components/schemas/Service'
        diagnostic_lab:
          $ref: '#/components/schemas/Service'
        diagnostic_medical:
          $ref: '#/components/schemas/Service'
        diagnostic_x_ray:
          $ref: '#/components/schemas/Service'
        dialysis:
          $ref: '#/components/schemas/Service'
        donor_procedures:
          $ref: '#/components/schemas/Service'
        drug_addiction:
          $ref: '#/components/schemas/Service'
        durable_medical_equipment:
          $ref: '#/components/schemas/Service'
        durable_medical_equipment_purchase:
          $ref: '#/components/schemas/Service'
        durable_medical_equipment_rental:
          $ref: '#/components/schemas/Service'
        emergency_room:
          $ref: '#/components/schemas/Service'
        endocrine:
          $ref: '#/components/schemas/Service'
        endodontics:
          $ref: '#/components/schemas/Service'
        experimental_drug_therapy:
          $ref: '#/components/schemas/Service'
        eye:
          $ref: '#/components/schemas/Service'
        eyewear_and_eyewear_accessories:
          $ref: '#/components/schemas/Service'
        family_planning:
          $ref: '#/components/schemas/Service'
        flu_vaccination:
          $ref: '#/components/schemas/Service'
        frames:
          $ref: '#/components/schemas/Service'
        free_standing_prescription_drug:
          $ref: '#/components/schemas/Service'
        gastrointestinal:
          $ref: '#/components/schemas/Service'
        general_benefits:
          $ref: '#/components/schemas/Service'
        generic_prescription_drug:
          $ref: '#/components/schemas/Service'
        generic_prescription_drug_formulary:
          $ref: '#/components/schemas/Service'
        generic_prescription_drug_non_formulary:
          $ref: '#/components/schemas/Service'
        gynecological:
          $ref: '#/components/schemas/Service'
        home_health_care:
          $ref: '#/components/schemas/Service'
        home_health_prescriptions:
          $ref: '#/components/schemas/Service'
        home_health_visits:
          $ref: '#/components/schemas/Service'
        hospice:
          $ref: '#/components/schemas/Service'
        hospital_inpatient:
          $ref: '#/components/schemas/Service'
        hospital_ambulatory_surgical:
          $ref: '#/components/schemas/Service'
        hospital_emergency_accident:
          $ref: '#/components/schemas/Service'
        hospital_emergency_medical:
          $ref: '#/components/schemas/Service'
        hospital_outpatient:
          $ref: '#/components/schemas/Service'
        hospital_room_and_board:
          $ref: '#/components/schemas/Service'
        immunizations:
          $ref: '#/components/schemas/Service'
        in_vitro_fertilization:
          $ref: '#/components/schemas/Service'
        independent_medical_evaluation:
          $ref: '#/components/schemas/Service'
        infertility:
          $ref: '#/components/schemas/Service'
        inhalation_therapy:
          $ref: '#/components/schemas/Service'
        intensive_care:
          $ref: '#/components/schemas/Service'
        invasive_procedures:
          $ref: '#/components/schemas/Service'
        lenses:
          $ref: '#/components/schemas/Service'
        licensed_ambulance:
          $ref: '#/components/schemas/Service'
        long_term_care:
          $ref: '#/components/schemas/Service'
        lymphatic:
          $ref: '#/components/schemas/Service'
        mail_order_prescription_drug:
          $ref: '#/components/schemas/Service'
        mail_order_prescription_drug_brand_name:
          $ref: '#/components/schemas/Service'
        mail_order_prescription_drug_generic:
          $ref: '#/components/schemas/Service'
        major_medical:
          $ref: '#/components/schemas/Service'
        mammogram_high_risk_patient:
          $ref: '#/components/schemas/Service'
        mammogram_low_risk_patient:
          $ref: '#/components/schemas/Service'
        massage_therapy:
          $ref: '#/components/schemas/Service'
        maternity:
          $ref: '#/components/schemas/Service'
        maxillofacial_prosthetics:
          $ref: '#/components/schemas/Service'
        medical_care:
          $ref: '#/components/schemas/Service'
        medically_related_transportation:
          $ref: '#/components/schemas/Service'
        mental_health:
          $ref: '#/components/schemas/Service'
        mental_health_facility_inpatient:
          $ref: '#/components/schemas/Service'
        mental_health_facility_outpatient:
          $ref: '#/components/schemas/Service'
        mental_health_provider_inpatient:
          $ref: '#/components/schemas/Service'
        mental_health_provider_outpatient:
          $ref: '#/components/schemas/Service'
        mri_cat_scan:
          $ref: '#/components/schemas/Service'
        neonatal_intensive_care:
          $ref: '#/components/schemas/Service'
        neurology:
          $ref: '#/components/schemas/Service'
        newborn_care:
          $ref: '#/components/schemas/Service'
        nonmedically_necessary_physical:
          $ref: '#/components/schemas/Service'
        nursery:
          $ref: '#/components/schemas/Service'
        obstetrical:
          $ref: '#/components/schemas/Service'
        obstetrical_gynecological:
          $ref: '#/components/schemas/Service'
        occupational_therapy:
          $ref: '#/components/schemas/Service'
        oncology:
          $ref: '#/components/schemas/Service'
        oral_surgery:
          $ref: '#/components/schemas/Service'
        orthodontics:
          $ref: '#/components/schemas/Service'
        orthopedic:
          $ref: '#/components/schemas/Service'
        other_medical:
          $ref: '#/components/schemas/Service'
        otological_exam:
          $ref: '#/components/schemas/Service'
        partial_hospitalization_psychiatric:
          $ref: '#/components/schemas/Service'
        pathology:
          $ref: '#/components/schemas/Service'
        pediatric:
          $ref: '#/components/schemas/Service'
        periodontics:
          $ref: '#/components/schemas/Service'
        pharmacy:
          $ref: '#/components/schemas/Service'
        physical_medicine:
          $ref: '#/components/schemas/Service'
        physical_therapy:
          $ref: '#/components/schemas/Service'
        physician_visit_office_sick:
          $ref: '#/components/schemas/Service'
        physician_visit_office_well:
          $ref: '#/components/schemas/Service'
        plan_waiting_period:
          $ref: '#/components/schemas/Service'
        pneumonia_vaccine:
          $ref: '#/components/schemas/Service'
        podiatry:
          $ref: '#/components/schemas/Service'
        podiatry_nursing_home_visits:
          $ref: '#/components/schemas/Service'
        podiatry_office_visits:
          $ref: '#/components/schemas/Service'
        pre_admission_testing:
          $ref: '#/components/schemas/Service'
        private_duty_nursing:
          $ref: '#/components/schemas/Service'
        private_duty_nursing_home:
          $ref: '#/components/schemas/Service'
        private_duty_nursing_inpatient:
          $ref: '#/components/schemas/Service'
        professional_physician:
          $ref: '#/components/schemas/Service'
        professional_physician_visit_home:
          $ref: '#/components/schemas/Service'
        professional_physician_visit_inpatient:
          $ref: '#/components/schemas/Service'
        professional_physician_visit_nursing_home:
          $ref: '#/components/schemas/Service'
        office_visit:
          $ref: '#/components/schemas/Service'
        professional_physician_visit_outpatient:
          $ref: '#/components/schemas/Service'
        professional_physician_visit_skilled_nursing:
          $ref: '#/components/schemas/Service'
        prosthetic_device:
          $ref: '#/components/schemas/Service'
        prosthodontics:
          $ref: '#/components/schemas/Service'
        psychiatric:
          $ref: '#/components/schemas/Service'
        psychiatric_inpatient:
          $ref: '#/components/schemas/Service'
        psychiatric_outpatient:
          $ref: '#/components/schemas/Service'
        psychiatric_room_and_board:
          $ref: '#/components/schemas/Service'
        psychotherapy:
          $ref: '#/components/schemas/Service'
        pulmonary:
          $ref: '#/components/schemas/Service'
        pulmonary_rehabilitation:
          $ref: '#/components/schemas/Service'
        radiation_therapy:
          $ref: '#/components/schemas/Service'
        rehabilitation:
          $ref: '#/components/schemas/Service'
        rehabilitation_inpatient:
          $ref: '#/components/schemas/Service'
        rehabilitation_outpatient:
          $ref: '#/components/schemas/Service'
        rehabilitation_room_and_board:
          $ref: '#/components/schemas/Service'
        renal:
          $ref: '#/components/schemas/Service'
        renal_supplies_in_the_home:
          $ref: '#/components/schemas/Service'
        residential_psychiatric_treatment:
          $ref: '#/components/schemas/Service'
        respite_care:
          $ref: '#/components/schemas/Service'
        restorative:
          $ref: '#/components/schemas/Service'
        routine_preventive_dental:
          $ref: '#/components/schemas/Service'
        routine_exam_use_for_routine_vision_exam_only:
          $ref: '#/components/schemas/Service'
        routine_physical:
          $ref: '#/components/schemas/Service'
        screening_laboratory:
          $ref: '#/components/schemas/Service'
        screening_x_ray:
          $ref: '#/components/schemas/Service'
        second_surgical_opinion:
          $ref: '#/components/schemas/Service'
        skilled_nursing_care:
          $ref: '#/components/schemas/Service'
        skilled_nursing_care_room_and_board:
          $ref: '#/components/schemas/Service'
        skin:
          $ref: '#/components/schemas/Service'
        smoking_cessation:
          $ref: '#/components/schemas/Service'
        social_work:
          $ref: '#/components/schemas/Service'
        speech_therapy:
          $ref: '#/components/schemas/Service'
        substance_abuse:
          $ref: '#/components/schemas/Service'
        substance_abuse_facility_inpatient:
          $ref: '#/components/schemas/Service'
        substance_abuse_facility_outpatient:
          $ref: '#/components/schemas/Service'
        substance_abuse_provider_inpatient:
          $ref: '#/components/schemas/Service'
        substance_abuse_provider_outpatient:
          $ref: '#/components/schemas/Service'
        surgical:
          $ref: '#/components/schemas/Service'
        surgical_assistance:
          $ref: '#/components/schemas/Service'
        surgical_benefits_facility:
          $ref: '#/components/schemas/Service'
        surgical_benefits_professional_physician:
          $ref: '#/components/schemas/Service'
        third_surgical_opinion:
          $ref: '#/components/schemas/Service'
        transitional_care:
          $ref: '#/components/schemas/Service'
        transitional_nursery_care:
          $ref: '#/components/schemas/Service'
        transplants:
          $ref: '#/components/schemas/Service'
        urgent_care:
          $ref: '#/components/schemas/Service'
        used_durable_medical_equipment:
          $ref: '#/components/schemas/Service'
        vision:
          $ref: '#/components/schemas/Service'
        well_baby_care:
          $ref: '#/components/schemas/Service'

    SubscriberDetails:
      type: object
      properties:
        member_id:
          type: string
          description: The member ID of the subscriber.
        first_name:
          type: string
          description: The first name of the subscriber.
        last_name:
          type: string
          description: The last name of the subscriber.
        middle_name:
          type: string
          description: The middle name of the subscriber.
        gender:
          type: string
          description: The gender of the subscriber.
        address:
          $ref: '#/components/schemas/Address'
        date_of_birth:
          type: string
          description: The date of birth of the subscriber.
    PayerDetails:
      type: object
      properties:
        payer_name:
          type: string
          description: The name of the payer.
        address:
          $ref: '#/components/schemas/Address'
        payer_url:
          type: string
    PlanDetails:
      type: object
      properties:
        plan_number:
          type: string
          description: The plan number.
        group_name:
          type: string
          description: The name of the group associated with the plan.
        group_number:
          type: string
          description: The group number.
        plan_start_date:
          type: string
          format: date
          description: The start date of the plan.
        plan_end_date:
          type: string
          format: date
          description: The end date of the plan.
        plan_eligibility_start_date:
          type: string
          format: date
          description: The eligibility start date of the plan.
        plan_eligibility_end_date:
          type: string
          format: date
          description: The eligibility end date of the plan.
        plan_name:
          type: string
          description: The name of the plan.
        plan_active:
          type: boolean
          description: Indicates whether the plan is active.
    CoverageSummary:
      type: object
      properties:
        individual_deductible_in_network:
          $ref: '#/components/schemas/Deductible'
        individual_deductible_out_network:
          $ref: '#/components/schemas/Deductible'
        individual_oop_in_network:
          $ref: '#/components/schemas/OOP'
        individual_oop_out_network:
          $ref: '#/components/schemas/OOP'
        family_deductible_in_network:
          $ref: '#/components/schemas/Deductible'
        family_deductible_out_network:
          $ref: '#/components/schemas/Deductible'
        family_oop_in_network:
          $ref: '#/components/schemas/OOP'
        family_oop_out_network:
          $ref: '#/components/schemas/OOP'
        co_insurance_in_network:
          $ref: '#/components/schemas/CoInsurance'
        co_insurance_out_network:
          $ref: '#/components/schemas/CoInsurance'
        co_payment_out_network:
          $ref: '#/components/schemas/CoPayment'
        co_payment_in_network:
          $ref: '#/components/schemas/CoPayment'
    Deductible:
      type: object
      properties:
        total_amount:
          type: string
          description: The total deductible amount.
        remaining_amount:
          type: string
          description: The remaining deductible amount.
    OOP:
      type: object
      properties:
        total_amount:
          type: string
          description: The total out-of-pocket amount.
        remaining_amount:
          type: string
          description: The remaining out-of-pocket amount.
    Service: # Had to duplicate from CoverageSummary, using allOf does not work
      type: object
      properties:
        individual_deductible_in_network:
          $ref: '#/components/schemas/Deductible'
        individual_deductible_out_network:
          $ref: '#/components/schemas/Deductible'
        individual_oop_in_network:
          $ref: '#/components/schemas/OOP'
        individual_oop_out_network:
          $ref: '#/components/schemas/OOP'
        family_deductible_in_network:
          $ref: '#/components/schemas/Deductible'
        family_deductible_out_network:
          $ref: '#/components/schemas/Deductible'
        family_oop_in_network:
          $ref: '#/components/schemas/OOP'
        family_oop_out_network:
          $ref: '#/components/schemas/OOP'
        co_insurance_in_network:
          $ref: '#/components/schemas/CoInsurance'
        co_insurance_out_network:
          $ref: '#/components/schemas/CoInsurance'
        co_payment_out_network:
          $ref: '#/components/schemas/CoPayment'
        co_payment_in_network:
          $ref: '#/components/schemas/CoPayment'
        service_code:
          type: string
          description: The service code.
    CoInsurance:
      type: object
      properties:
        amount:
          type: string
          description: The co-insurance amount.
    CoPayment:
      type: object
      properties:
        amount:
          type: string
          description: The co-payment amount.
    ResponseMetadata:
      type: object
      properties:
        next_cursor:
          type: string
          description: The cursor for the next page of results.
        limit:
          type: integer
          description: The maximum number of items to return.
        total:
          type: integer
          description: The total number of items available.
          # ----------------- Card Components -----------------
    CardApiResponse:
      type: object
      required:
      - card_id
      - state
      - created_at
      - deleted
      properties:
        card_id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/CardState'
        created_at:
          type: string
          format: date-time
          description: The timestamp when the eligibility response was created.
        error:
          $ref: '#/components/schemas/ModelError'
        payer_match:
          $ref: '#/components/schemas/PayerMatch'
        metadata:
          $ref: '#/components/schemas/CardResponseMetadata'
        images:
          type: object
          nullable: true
          properties:
            front:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL to the front image of the card.
            back:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL to the back image of the card.
        deleted:
          type: boolean
        details:
          type: object
          nullable: true
          properties:
            group_number:
              $ref: '#/components/schemas/MatchScore'
            member_number:
              $ref: '#/components/schemas/MatchScore'
            payer_name:
              $ref: '#/components/schemas/MatchScore'
            rx_bin:
              $ref: '#/components/schemas/MatchScore'
            rx_pcn:
              $ref: '#/components/schemas/MatchScore'
            member_name:
              $ref: '#/components/schemas/MatchScore'
            dependent_names:
              type: array
              items:
                $ref: '#/components/schemas/MatchScore'
            plan_name:
              $ref: '#/components/schemas/MatchScore'
            plan_id:
              $ref: '#/components/schemas/MatchScore'
            card_specific_id:
              $ref: '#/components/schemas/MatchScore'
            client_name:
              $ref: '#/components/schemas/MatchScore'
            payer_id:
              $ref: '#/components/schemas/MatchScore'
            plan_details:
              $ref: '#/components/schemas/MatchScore'
            rx_id:
              $ref: '#/components/schemas/MatchScore'
            rx_issuer:
              $ref: '#/components/schemas/MatchScore'
            rx_plan:
              $ref: '#/components/schemas/MatchScore'
            start_date:
              $ref: '#/components/schemas/MatchScore'
            employer:
              $ref: '#/components/schemas/MatchScore'
            medicare_medicaid_id:
              $ref: '#/components/schemas/MatchScore'
            member_dob:
              $ref: '#/components/schemas/MatchScore'
            member_gender:
              $ref: '#/components/schemas/MatchScore'
            member_id_prefix:
              $ref: '#/components/schemas/MatchScore'
            member_id_suffix:
              $ref: '#/components/schemas/MatchScore'
            part_a_effective_date:
              $ref: '#/components/schemas/MatchScore'
            part_b_effective_date:
              $ref: '#/components/schemas/MatchScore'
            pharmacy_benefit_manager:
              $ref: '#/components/schemas/MatchScore'
            plan_type:
              $ref: '#/components/schemas/MatchScore'
            addresses:
              $ref: '#/components/schemas/AddressResult'
            phone_numbers:
              $ref: '#/components/schemas/PhoneNumberResult'
            copays:
              $ref: '#/components/schemas/CopayResult'
    PayerMatch:
      type: object
      properties:
        cardscan_payer_id:
          type: string
          nullable: true
        cardscan_payer_name:
          type: string
          nullable: true
        score:
          type: string
          nullable: true
        change_healthcare:
          type: array
          items:
            $ref: '#/components/schemas/CHCPayerRecord'
          nullable: true
        custom:
          type: array
          items:
            $ref: '#/components/schemas/CustomPayerRecord'
          nullable: true
        message:
          type: string
          nullable: true

    CHCPayerRecord:
      type: object
      properties:
        chc_payer_id:
          type: string
        chc_payer_name:
          type: string
        score:
          type: string

    CustomPayerRecord:
      type: object
      properties:
        custom_payer_id:
          type: string
        custom_payer_name:
          type: string
        custom_payer_name_alt:
          type: string
          nullable: true
        score:
          type: string
        source:
          type: string

    CardResponseMetadata:
      type: object
      properties:
        insurance_scan_version:
          type: string
          nullable: true
        payer_match_version:
          type: string
          nullable: true
    AddressResult:
      type: array
      items:
        type: object
        properties:
          value:
            type: string
          scores:
            type: array
            items:
              type: string
          type:
            $ref: '#/components/schemas/AddressType'
          label:
            type: string
    PhoneNumberResult:
      type: array
      items:
        type: object
        properties:
          value:
            type: string
          scores:
            type: array
            items:
              type: string
          type:
            $ref: '#/components/schemas/PhoneNumberType'
          label:
            type: string
    CopayResult:
      type: array
      items:
        type: object
        properties:
          value:
            type: string
          scores:
            type: array
            items:
              type: string
          service:
            $ref: '#/components/schemas/CopayDeductibleService'
          category:
            $ref: '#/components/schemas/CopayCategory'
    PhoneNumberType:
      type: string
      enum:
      - pcp_phone
      - member_services_phone
      - provider_services_phone
      - pharmacy_services_phone
      - dental_benefit_phone
      - vision_benefit_phone
      - telemedicine_phone

    AddressType:
      type: string
      enum:
      - medical_claims_address
      - pharmacy_claims_address
      - vision_claims_address
      - dental_claims_address
      - appeals_address
      - pcp_address
      - general_address

    CopayDeductibleService:
      type: string
      enum:
      - office_visit
      - specialist_visit
      - emergency_room
      - urgent_care
      - preventive_care
      - prescription
      - vision
      - dental
      - telemedicine
      - in_network_medical
      - out_of_network_medical
      - other

    CopayCategory:
      type: string
      enum:
      - copay
      - coinsurance
      - deductible
      - out_of_pocket_max
      - other
    CardState:
      type: string
      enum:
      - pending
      - processing
      - frontside_processing
      - frontside_failed
      - backside_processing
      - backside_failed
      - post_processing
      - completed
      - enriched
      - error
      - unknown
    EligibilityState:
      type: string
      enum:
      - processing
      - completed
      - error
    MatchScore:
      type: object
      properties:
        value:
          type: string
          description: The matching score value of the card.
        scores:
          type: array
          items:
            type: string
    ScanCaptureType:
      type: string
      enum:
      - manual
      - automatic
      - selectedFile
      - api
          # ----------------- Scan Components -----------------
    ScanOrientation:
      type: string
      enum:
      - front
      - back
    ScanMetadata:
      type: object
      properties:
        captureType:
          type: string
          enum: [automatic, manual]
          description: The type of capture (automatic or manual)
        guides:
          type: object
          properties:
            x:
              type: integer
            y:
              type: integer
            width:
              type: integer
            height:
              type: integer
          description: Coordinates and dimensions of capture guides
        captureCanvas:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
          description: Dimensions of the capture canvas
        videoBackground:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
          description: Dimensions of the video background
        windowInner:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
          description: Inner window dimensions
        mlThreshold:
          type: number
          description: Threshold for machine learning
        laplacianThreshold:
          type: number
          description: Threshold for Laplacian edge detection
        package_name:
          type: string
          description: Name of the package
        package_version:
          type: string
          description: Version of the package
        videoTrack:
          type: object
          properties:
            aspectRatio:
              type: number
            deviceId:
              type: string
            frameRate:
              type: number
            groupId:
              type: string
            height:
              type: integer
            resizeMode:
              type: string
            width:
              type: integer
          description: Video track details
        cameraCapabilities:
          type: object
          properties:
            aspectRatio:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
            deviceId:
              type: string
            facingMode:
              type: array
              items:
                type: string
            frameRate:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
            groupId:
              type: string
            height:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
            resizeMode:
              type: array
              items:
                type: string
            width:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
          description: Camera capabilities
        capture_score:
          type: object
          properties:
            scores:
              type: array
              items:
                type: object
                properties:
                  score:
                    type: number
                  laplacian:
                    type: number
              description: List of capture scores
            max_lapScore:
              type: number
              description: Maximum Laplacian score
    UploadParameters:
      type: object
      required:
      - Content-Type
      - Content-Disposition
      - x-amz-meta-cardscan-account-id
      - x-amz-meta-cardscan-card-id
      - x-amz-meta-cardscan-scan-id
      - key
      - x-amz-algorithm
      - x-amz-credential
      - x-amz-date
      - x-amz-security-token
      - policy
      - x-amz-signature
      properties:
        Content-Type:
          type: string
          description: The content type of the file
        Content-Disposition:
          type: string
          description: The content disposition of the file
        x-amz-meta-cardscan-account-id:
          type: string
          description: The account ID
        x-amz-meta-cardscan-card-id:
          type: string
          description: The card ID
        x-amz-meta-cardscan-scan-id:
          type: string
          description: The scan ID
        x-amz-meta-cardscan-user-id:
          type: string
          description: The user ID
        x-amz-meta-cardscan-developer-user-id:
          type: string
          description: The developer user ID
        key:
          type: string
          description: The key of the file
        x-amz-algorithm:
          type: string
          description: The algorithm used to sign the request
        x-amz-credential:
          type: string
          description: The credential used to sign the request
        x-amz-date:
          type: string
          description: The date of the request
        x-amz-security-token:
          type: string
          description: The security token used to sign the request
        policy:
          type: string
          description: The policy used to sign the request
        x-amz-signature:
          type: string
          description: The signature used to sign the request
    CardWebsocketEvent:
      type: object
      required:
      - event_id
      - type
      - card_id
      - state
      - created_at
      properties:
        event_id:
          type: string
        type:
          type: string
          enum:
          - card
        card_id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/CardState'
        created_at:
          type: string
          format: date-time
        session_id:
          type: string
        error:
          $ref: '#/components/schemas/WebsocketError'

    EligibilityWebsocketEvent:
      type: object
      required:
      - event_id
      - type
      - eligibility_id
      - state
      - created_at
      properties:
        event_id:
          type: string
        type:
          type: string
          enum:
          - eligibility
        eligibility_id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/CardState'
        created_at:
          type: string
          format: date-time
        session_id:
          type: string
        error:
          $ref: '#/components/schemas/WebsocketError'
        card_id:
          type: string
          format: uuid
    ApiErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A message describing the error.
        type:
          type: string
          description: The type of error.
        code:
          type: number
          description: The error code.

    EligibilityError:
      type: object
      properties:
        field:
          type: string
          description: The field that caused the error.
        code:
          type: string
          description: The error code.
        description:
          type: string
          description: A description of the error.
        followup_action:
          type: string
          description: Suggested follow-up action for the error.
        location:
          type: string
          description: The location of the error.
        possible_resolutions:
          type: string
          description: Possible resolutions for the error.

    ModelError:
      type: object
      required:
      - message
      - type
      - code
      properties:
        message:
          type: string
          description: A message describing the error.
        type:
          type: string
          description: The type of error.
        code:
          type: string
          description: The error code.
        error:
          type: string
          deprecated: true
          description: The type of the error (deprecated)

    WebsocketError:
      type: object
      required:
      - message
      - type
      - code
      properties:
        message:
          type: string
          description: A message describing the error.
        type:
          type: string
          description: The type of error.
        code:
          type: string
          description: The error code.
        error:
          type: string
          deprecated: true
          description: The type of the error (deprecated)

    Address:
      type: object
      properties:
        address1:
          maxLength: 55
          minLength: 0
          type: string
          example: 123 address1
        address2:
          maxLength: 55
          minLength: 0
          type: string
        city:
          maxLength: 30
          minLength: 0
          type: string
          example: city1
        state:
          maxLength: 2
          minLength: 0
          type: string
          example: wa
        postal_code:
          maxLength: 15
          minLength: 0
          type: string
          example: '981010000'

    WebhookCardCompletedEvent:
      type: object
      title: Card Completed Event
      description: Triggered after a successful insurance card scan
      required:
      - card_id
      - configuration
      - created_at
      - deleted
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the created card.
        configuration:
          type: object
          description: Configuration settings used during the card scan.
          properties:
            enable_backside_scan:
              type: boolean
              description: Flag to enable backside scan.
            enable_livescan:
              type: boolean
              description: Flag to enable live scanning.
            enable_payer_match:
              type: boolean
              description: Flag to enable payer matching.
          required:
          - enable_backside_scan
          - enable_livescan
          - enable_payer_match
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the card was created.
        deleted:
          type: boolean
          description: Flag indicating whether the card is deleted.
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update to the card record.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookCardCreatedEvent:
      type: object
      title: Card Created Event
      description: Triggered when a new insurance card is created at the start of a scanning attempt.
      required:
      - card_id
      - configuration
      - created_at
      - deleted
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the created card.
        configuration:
          type: object
          description: Configuration settings used during the card scan.
          properties:
            enable_backside_scan:
              type: boolean
              description: Flag to enable backside scan.
            enable_livescan:
              type: boolean
              description: Flag to enable live scanning.
            enable_payer_match:
              type: boolean
              description: Flag to enable payer matching.
          required:
          - enable_backside_scan
          - enable_livescan
          - enable_payer_match
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the card was created.
        deleted:
          type: boolean
          description: Flag indicating whether the card is deleted.
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update to the card record.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookCardDeletedEvent:
      type: object
      title: Card Deleted Event
      description: Triggered when a scanned insurance card is marked as deleted.
      required:
      - card_id
      - configuration
      - created_at
      - deleted
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the card.
        configuration:
          type: object
          description: Configuration settings used during the card scan.
          properties:
            enable_backside_scan:
              type: boolean
              description: Flag to enable backside scan.
            enable_livescan:
              type: boolean
              description: Flag to enable live scanning.
            enable_payer_match:
              type: boolean
              description: Flag to enable payer matching.
          required:
          - enable_backside_scan
          - enable_livescan
          - enable_payer_match
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the card was created.
        deleted:
          type: boolean
          description: Flag indicating whether the card is deleted.
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookCardErrorEvent:
      type: object
      title: Card Error Event
      description: Triggered when an error occurs during a card scan.
      required:
      - card_id
      - created_at
      - deleted
      - error
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the card.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the card was created.
        deleted:
          type: boolean
          description: Flag indicating whether the card is deleted.
        error:
          type: object
          description: Details about the error encountered during the scan.
          properties:
            error:
              type: string
              description: Error type or identifier.
            message:
              type: string
              description: Detailed error message.
          required:
          - error
          - message
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookEligibilityCreatedEvent:
      type: object
      title: Eligibility Created Event
      description: Triggered when a new eligibility record is created.
      required:
      - eligibility_id
      - card_id
      - created_at
      - deleted
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        eligibility_id:
          type: string
          format: uuid
          description: Unique identifier for the eligibility record.
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the associated card.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the eligibility record was created.
        deleted:
          type: boolean
          description: Flag indicating whether the eligibility record is deleted.
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookEligibilityCompletedEvent:
      type: object
      title: Eligibility Completed Event
      description: Triggered when an eligibility check is successfully completed.
      required:
      - eligibility_id
      - card_id
      - created_at
      - deleted
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        eligibility_id:
          type: string
          format: uuid
          description: Unique identifier for the eligibility record.
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the associated card.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the eligibility record was created.
        deleted:
          type: boolean
          description: Flag indicating whether the eligibility record is deleted.
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookEligibilityDeletedEvent:
      type: object
      title: Eligibility Deleted Event
      description: Triggered when an eligibility record is deleted.
      required:
      - eligibility_id
      - card_id
      - created_at
      - deleted
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        eligibility_id:
          type: string
          format: uuid
          description: Unique identifier for the eligibility record.
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the associated card.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the eligibility record was created.
        deleted:
          type: boolean
          description: Flag indicating whether the eligibility record is deleted.
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update.
        user_id:
          type: string
          description: Identifier for the user associated with the event.

    WebhookEligibilityErrorEvent:
      type: object
      title: Eligibility Error Event
      description: Triggered when an error occurs during an eligibility check.
      required:
      - eligibility_id
      - card_id
      - created_at
      - deleted
      - error
      - session_id
      - type
      - updated_at
      - user_id
      properties:
        eligibility_id:
          type: string
          format: uuid
          description: Unique identifier for the eligibility record.
        card_id:
          type: string
          format: uuid
          description: Unique identifier for the associated card.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the eligibility record was created.
        deleted:
          type: boolean
          description: Flag indicating whether the eligibility record is deleted.
        error:
          type: object
          description: Details about the error encountered during the eligibility process.
          properties:
            error:
              type: string
              description: Error type or identifier.
            message:
              type: string
              description: Detailed error message.
          required:
          - error
          - message
        session_id:
          type: string
          description: Unique identifier for the session.
        type:
          type: string
          description: Type of event.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the last update.
        user_id:
          type: string
          description: Identifier for the user associated with the event.
