openapi: 3.0.0
info:
  title: CardScan API
  description: The official documentation for the CardScan API.
  version: 1.0.0
servers:
  - url: https://{prefix}.cardscan.ai/{version}
    description: API Server
    variables:
      version:
        default: v1
        description: The version of the API
      prefix:
        description: The api environment to use as a prefix, e.g. api, sandbox
        default: sandbox
        enum:
          - api
          - sandbox
tags:
  - name: CardScan
paths:
  /access-token:
    get:
      tags:
        - CardScan
      summary: Access Token
      operationId: getAccessToken
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          description: The ID of the user
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - Token
                  - IdentityId
                properties:
                  Token:
                    type: string
                    description: The access token.
                  IdentityId:
                    type: string
                    description: The identity ID.
                  session_id:
                    type: string
                    description: The session ID.
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /cards/{card_id}:
    delete:
      tags:
        - CardScan
      summary: Delete Card
      operationId: deleteCardById
      security:
        - bearerAuth: []
      parameters:
        - name: card_id
          description: The ID of the card
          in: path
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "204":
          description: Card was successfully deleted
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "403":
          description: Forbidden
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Card not found
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

    get:
      tags:
        - CardScan
      summary: Get Card by ID
      operationId: getCardById
      security:
        - bearerAuth: []
      parameters:
        - name: card_id
          description: The ID of the card
          in: path
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          $ref: "#/components/responses/CardResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "403":
          description: Forbidden
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Card not found
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /cards/search:
    get:
      tags:
        - CardScan
      summary: Search Cards (200) OK
      operationId: searchCards
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - cards
                  - response_metadata
                properties:
                  cards:
                    type: array
                    items:
                      $ref: "#/components/schemas/CardApiResponse"
                  response_metadata:
                    $ref: "#/components/schemas/ResponseMetadata"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /cards:
    get:
      tags:
        - CardScan
      summary: List Cards
      operationId: listCards
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - cards
                  - response_metadata
                properties:
                  cards:
                    type: array
                    items:
                      $ref: "#/components/schemas/CardApiResponse"
                  response_metadata:
                    $ref: "#/components/schemas/ResponseMetadata"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

    post:
      tags:
        - CardScan
      summary: Creates a new card
      operationId: createCard
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                enable_backside_scan:
                  type: boolean
                  default: false
                  description: Whether to enable backside scanning
                enable_livescan:
                  type: boolean
                  default: false
                  description: Whether to enable live scanning
                backside:
                  type: object
                  properties:
                    scanning:
                      type: string
                      default: disabled
                      enum:
                        - required
                        - optional
                        - disabled
                      description: The scanning mode

      responses:
        "201":
          $ref: "#/components/responses/CardResponse"
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /cards/{card_id}/upload:
    post:
      tags:
        - CardScan
      summary: Direct Upload
      operationId: directUpload
      requestBody:
        content:
          image/jpeg:
            schema:
              oneOf:
                - type: string
                  format: base64
                - type: string
                  format: binary
      security:
        - bearerAuth: []
      parameters:
        - name: orientation
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ScanOrientation"
        - name: capture_type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ScanCaptureType"
        - name: card_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - card_id
                  - scan_id
                  - metadata
                properties:
                  card_id:
                    type: string
                    format: uuid
                  scan_id:
                    type: string
                    format: uuid
                  metadata:
                    type: object
                    properties:
                      ocr_latency:
                        type: string
                        description: OCR latency in milliseconds
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "403":
          description: Forbidden
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Card not found
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /cards/{card_id}/generate-upload-url:
    post:
      tags:
        - CardScan
      summary: Card - Generate Upload URL
      operationId: generateCardUploadUrl
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - orientation
              properties:
                orientation:
                  $ref: "#/components/schemas/ScanOrientation"
                capture_type:
                  $ref: "#/components/schemas/ScanCaptureType"
                metadata:
                  $ref: "#/components/schemas/ScanMetadata"
      security:
        - bearerAuth: []
      parameters:
        - name: card_id
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - name: expiration
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 3600
            default: 3600
          required: false
      responses:
        "200":
          $ref: "#/components/responses/UploadUrlResponse"
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "403":
          description: Forbidden
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Card not found
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /scans/{scan_id}/metadata:
    get:
      tags:
        - CardScan
      summary: Get Scan Metadata
      operationId: getScanMetadata
      security:
        - bearerAuth: []
      parameters:
        - name: scan_id
          in: path
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "403":
          description: Forbidden
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Scan not found
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /generate-upload-url:
    get:
      tags:
        - CardScan
      summary: Generate an upload URL
      operationId: generateUploadUrl
      security:
        - bearerAuth: []
      parameters:
        - name: expiration
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 3600
          required: true
      responses:
        "200":
          $ref: "#/components/responses/UploadUrlResponse"
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /eligibility/{eligibility_id}:
    get:
      tags:
        - CardScan
      summary: Get Eligibility
      operationId: getEligibilityById
      security:
        - bearerAuth: []
      parameters:
        - name: eligibility_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: A single eligibility record
          $ref: "#/components/responses/EligibilityResponse"
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Eligibility record not found
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /eligibility:
    get:
      tags:
        - CardScan
      summary: List Eligibility
      operationId: listEligibility
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - eligibility_requests
                  - response_metadata
                properties:
                  eligibility_requests:
                    type: array
                    items:
                      $ref: "#/components/schemas/EligibilityApiResponse"
                  response_metadata:
                    $ref: "#/components/schemas/ResponseMetadata"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

    post:
      tags:
        - CardScan
      summary: Create Eligibility Record
      operationId: createEligibility
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - eligibility
                - card_id
              properties:
                eligibility:
                  $ref: "#/components/schemas/EligibilityInfo"
                card_id:
                  type: string
                  format: uuid
                  description: The ID of the card.
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Eligibility record created
          $ref: "#/components/responses/EligibilityResponse"
        "400":
          description: Missing properties in the request body
          $ref: "#/components/responses/ApiErrorResponse"
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          $ref: "#/components/responses/ApiErrorResponse"
          description: Card not found
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /generate-magic-link:
    get:
      tags:
        - CardScan
      operationId: generateMagicLink
      summary: Generate Magic Link
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Generates a magic link
          content:
            application/json:
              schema:
                type: object
                required:
                  - magic_link
                  - token
                  - expires_at
                properties:
                  magic_link:
                    type: string
                    format: uri
                    description: The URL of the magic link
                  token:
                    type: string
                    description: The token associated with the magic link
                  expires_at:
                    type: string
                    format: date-time
                    description: The expiration date and time of the magic link
        "401":
          description: Unauthorized
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

  /validate-magic-link:
    get:
      tags:
        - CardScan
      summary: Validate Magic Link
      operationId: validateMagicLink
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - Token
                  - IdentityId
                properties:
                  Token:
                    type: string
                    description: The token associated with the magic link
                  IdentityId:
                    type: string
                    description: The identity ID.
        "400":
          description: Bad request
          $ref: "#/components/responses/ApiErrorResponse"
        "404":
          description: Magic link not found
          $ref: "#/components/responses/ApiErrorResponse"
        "410":
          description: Magic link expired
          $ref: "#/components/responses/ApiErrorResponse"
        "500":
          $ref: "#/components/responses/ApiInternalErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    ApiErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorResponse"
    ApiInternalErrorResponse:
      description: Internal Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A message describing the error.
    EligibilityResponse:
      description: Successful eligibility response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EligibilityApiResponse"
    CardResponse:
      description: Successful card response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CardApiResponse"
    UploadUrlResponse:
      description: Successful upload URL response
      content:
        application/json:
          schema:
            type: object
            required:
              - upload_url
              - upload_parameters
              - card_id
              - scan_id
            properties:
              card_id:
                type: string
                format: uuid
              scan_id:
                type: string
                format: uuid
              upload_url:
                type: string
                format: uri
                description: The URL to upload the card image.
              upload_parameters:
                $ref: "#/components/schemas/UploadParameters"

  schemas:
    # ----------------- Cardscan eligibility API Components -----------------
    ProviderDto:
      type: object
      required:
        - firstName
        - lastName
        - npi
      properties:
        firstName:
          type: string
          maxLength: 35
          minLength: 1
          description: >
            Loop: 2100B Segment: MN1, Element: NM104,
            Notes: NM101=PR when providerType='payer' && payerId is present otherwise 1P for Provider,
            NM102=1 Person, firstName 1-35 alphanumeric characters
        lastName:
          type: string
          maxLength: 60
          minLength: 1
          description: >
            Loop: 2100B Segment: MN1, Element: NM103,
            Notes: NM101=PR when providerType='payer' && payerId is present otherwise 1P for Provider,
            NM102=1 Person, lastName 1-60 alphanumeric characters
        npi:
          type: string
          maxLength: 80
          minLength: 1
          description: >
            Loop: 2100B Segment: MN1, Element: NM109,
            Notes: NM108=XX Centers for Medicare and Medicaid Services National Provider Identifier
            2-80 alphanumeric characters
    SubscriberDto:
      type: object
      required:
        - firstName
        - lastName
        - dateOfBirth
      properties:
        firstName:
          type: string
          maxLength: 35
          minLength: 1
          description: >
            Loop: 2100C and 2100D, Segment: MN1, Element: NM104,
            Notes: firstName 1-35 alphanumeric characters
        lastName:
          type: string
          maxLength: 60
          minLength: 1
          description: >
            Loop: 2100C and 2100D, Segment: MN1, Element: NM103,
            Notes: lastName 1-60 alphanumeric characters
        dateOfBirth:
          type: string
          pattern: '^\d{8}$'
          description: >
            Loop: 2100C and 2100D, Segment: DMG, Element: DMG02,
            Notes: date of birth in YYYYMMDD format
    EligibilityInfo:
      type: object
      required:
        - provider
        - subscriber
      properties:
        provider:
          $ref: "#/components/schemas/ProviderDto"
        subscriber:
          $ref: "#/components/schemas/SubscriberDto"
    EligibilityApiResponse:
      type: object
      required:
        - eligibility_id
        - state
        - card_id
        - created_at
        - update_at
      properties:
        eligibility_id:
          type: string
          description: The ID of the eligibility record.
        state:
          type: string
          enum:
            - completed
            - processing
            - error
          description: The state of the eligibility record.
        card_id:
          type: string
          description: The ID of the card.
        eligibility_request:
          type: object
          description: The eligibility request.
          properties:
            controlNumber:
              type: string
              description: The control number of the claim.
              nullable: false
            tradingPartnerServiceId:
              type: string
              description: The ID of the trading partner service.
              nullable: false
            provider:
              $ref: "#/components/schemas/ProviderDto"
            subscriber:
              $ref: "#/components/schemas/SubscriberDto"
        eligibility_response:
          type: object
          additionalProperties: true
          nullable: true
          description: The eligibility raw response.
        eligibility_summarized_response:
          additionalProperties: true
          description: The eligibility summarized response.
          nullable: true
        error:
          type: object
          description: Details about any error that occurred during the request. (Only first error)
          nullable: true
          properties:
            type:
              type: string
              description: The type of error.
            code:
              type: string
              description: The error code.
            message:
              type: string
              description: A message describing the error.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the eligibility record was created.
        update_at:
          type: string
          format: date-time
          description: The timestamp when the eligibility record was last updated.

    EligibilitySummarizedResponse:
      type: object
      properties:
        eligibility_request_id:
          type: string
          format: uuid
          description: The ID of the eligibility request.
        subscriber_details:
          $ref: "#/components/schemas/SubscriberDetails"
        payer_details:
          $ref: "#/components/schemas/PayerDetails"
        plan_details:
          $ref: "#/components/schemas/PlanDetails"
        coverage_summary:
          $ref: "#/components/schemas/CoverageSummary"
        chiropractic:
          $ref: "#/components/schemas/Service"
        emergency_room:
          $ref: "#/components/schemas/Service"
        office_visit:
          $ref: "#/components/schemas/Service"
        urgent_care:
          $ref: "#/components/schemas/Service"
        hospital_outpatient:
          $ref: "#/components/schemas/Service"

    SubscriberDetails:
      type: object
      properties:
        member_id:
          type: string
          description: The member ID of the subscriber.
        firstname:
          type: string
          description: The first name of the subscriber.
        lastname:
          type: string
          description: The last name of the subscriber.
        middlename:
          type: string
          description: The middle name of the subscriber.
        gender:
          type: string
          description: The gender of the subscriber.
        address:
          $ref: "#/components/schemas/Address"
        dob:
          type: string
          format: date
          description: The date of birth of the subscriber.

    PayerDetails:
      type: object
      properties:
        payer_name:
          type: string
          description: The name of the payer.
        address:
          $ref: "#/components/schemas/Address"

    PlanDetails:
      type: object
      properties:
        plan_number:
          type: string
          description: The plan number.
        group_name:
          type: string
          description: The name of the group associated with the plan.
        group_number:
          type: string
          description: The group number.
        plan_start_date:
          type: string
          format: date
          description: The start date of the plan.
        plan_eligibility_start_date:
          type: string
          format: date
          description: The eligibility start date of the plan.
        plan_name:
          type: string
          description: The name of the plan.
        plan_active:
          type: boolean
          description: Indicates whether the plan is active.

    CoverageSummary:
      type: object
      properties:
        individual_deductible_in_network:
          $ref: "#/components/schemas/Deductible"
        individual_oop_in_network:
          $ref: "#/components/schemas/OOP"
        family_deductible_in_network:
          $ref: "#/components/schemas/Deductible"
        family_oop_in_network:
          $ref: "#/components/schemas/OOP"

    Deductible:
      type: object
      properties:
        total_amount:
          type: string
          description: The total deductible amount.
        remaining_amount:
          type: string
          description: The remaining deductible amount.

    OOP:
      type: object
      properties:
        total_amount:
          type: string
          description: The total out-of-pocket amount.
        remaining_amount:
          type: string
          description: The remaining out-of-pocket amount.

    Service:
      type: object
      properties:
        co_insurance_in_network:
          $ref: "#/components/schemas/CoInsurance"
        co_payment_in_network:
          $ref: "#/components/schemas/CoPayment"
        service_code:
          type: string
          description: The service code.

    CoInsurance:
      type: object
      properties:
        amount:
          type: string
          description: The co-insurance amount.

    CoPayment:
      type: object
      properties:
        amount:
          type: string
          description: The co-payment amount.

    ResponseMetadata:
      type: object
      properties:
        cursor:
          type: string
          description: The cursor for the next page of results.
        limit:
          type: integer
          description: The maximum number of items to return.
        total:
          type: integer
          description: The total number of items available.

    # ----------------- Card Components -----------------

    CardApiResponse:
      type: object
      required:
        - card_id
        - state
        - created_at
        - deleted
      properties:
        card_id:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/CardState"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the eligibility response was created.
        error:
          $ref: "#/components/schemas/ApiErrorResponse"
        images:
          type: object
          nullable: true
          properties:
            front:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL to the front image of the card.
            back:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL to the back image of the card.
        deleted:
          type: boolean

        details:
          type: object
          nullable: true
          properties:
            group_number:
              $ref: "#/components/schemas/MatchScore"
            member_number:
              $ref: "#/components/schemas/MatchScore"
            payer_name:
              $ref: "#/components/schemas/MatchScore"
            rx_bin:
              $ref: "#/components/schemas/MatchScore"
            rx_pcn:
              $ref: "#/components/schemas/MatchScore"
            member_name:
              $ref: "#/components/schemas/MatchScore"
            dependent_names:
              type: array
              items:
                $ref: "#/components/schemas/MatchScore"
            plan_name:
              $ref: "#/components/schemas/MatchScore"
            plan_id:
              $ref: "#/components/schemas/MatchScore"
            card_specific_id:
              $ref: "#/components/schemas/MatchScore"

    CardState:
      type: string
      enum:
        - pending
        - processing
        - frontside_processing
        - frontside_failed
        - backside_processing
        - backside_failed
        - post_processing
        - completed
        - error
        - unknown

    EligibilityState:
      type: string
      enum:
        - processing
        - completed
        - error

    MatchScore:
      type: object
      properties:
        value:
          type: string
          description: The matching score value of the card.
        scores:
          type: array
          items:
            type: string

    ScanCaptureType:
      type: string
      enum:
        - manual
        - automatic
        - selectedFile
        - api

    # ----------------- Scan Components -----------------
    ScanOrientation:
      type: string
      enum:
        - front
        - back

    ScanMetadata:
      type: object
      properties:
        captureType:
          type: string
          enum: [automatic, manual]
          description: The type of capture (automatic or manual)
        guides:
          type: object
          properties:
            x:
              type: integer
            y:
              type: integer
            width:
              type: integer
            height:
              type: integer
          description: Coordinates and dimensions of capture guides
        captureCanvas:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
          description: Dimensions of the capture canvas
        videoBackground:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
          description: Dimensions of the video background
        windowInner:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
          description: Inner window dimensions
        mlThreshold:
          type: number
          description: Threshold for machine learning
        laplacianThreshold:
          type: number
          description: Threshold for Laplacian edge detection
        package_name:
          type: string
          description: Name of the package
        package_version:
          type: string
          description: Version of the package
        videoTrack:
          type: object
          properties:
            aspectRatio:
              type: number
            deviceId:
              type: string
            frameRate:
              type: number
            groupId:
              type: string
            height:
              type: integer
            resizeMode:
              type: string
            width:
              type: integer
          description: Video track details
        cameraCapabilities:
          type: object
          properties:
            aspectRatio:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
            deviceId:
              type: string
            facingMode:
              type: array
              items:
                type: string
            frameRate:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
            groupId:
              type: string
            height:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
            resizeMode:
              type: array
              items:
                type: string
            width:
              type: object
              properties:
                max:
                  type: number
                min:
                  type: number
          description: Camera capabilities
        capture_score:
          type: object
          properties:
            scores:
              type: array
              items:
                type: object
                properties:
                  score:
                    type: number
                  laplacian:
                    type: number
              description: List of capture scores
            max_lapScore:
              type: number
              description: Maximum Laplacian score

    UploadParameters:
      type: object
      required:
        - Content-Type
        - Content-Disposition
        - x-amz-meta-cardscan-account-id
        - x-amz-meta-cardscan-card-id
        - x-amz-meta-cardscan-scan-id
        - key
        - x-amz-algorithm
        - x-amz-credential
        - x-amz-date
        - x-amz-security-token
        - policy
        - x-amz-signature
      properties:
        Content-Type:
          type: string
          description: The content type of the file
        Content-Disposition:
          type: string
          description: The content disposition of the file
        x-amz-meta-cardscan-account-id:
          type: string
          description: The account ID
        x-amz-meta-cardscan-card-id:
          type: string
          description: The card ID
        x-amz-meta-cardscan-scan-id:
          type: string
          description: The scan ID
        x-amz-meta-cardscan-user-id:
          type: string
          description: The user ID
        x-amz-meta-cardscan-developer-user-id:
          type: string
          description: The developer user ID
        key:
          type: string
          description: The key of the file
        x-amz-algorithm:
          type: string
          description: The algorithm used to sign the request
        x-amz-credential:
          type: string
          description: The credential used to sign the request
        x-amz-date:
          type: string
          description: The date of the request
        x-amz-security-token:
          type: string
          description: The security token used to sign the request
        policy:
          type: string
          description: The policy used to sign the request
        x-amz-signature:
          type: string
          description: The signature used to sign the request

    CardWebsocketEvent:
      type: object
      required:
        - event_id
        - type
        - card_id
        - state
        - created_at
      properties:
        event_id:
          type: string
        type:
          type: string
          enum:
            - card
        card_id:
          type: string
        state:
          $ref: "#/components/schemas/CardState"
        created_at:
          type: string
          format: date-time
        session_id:
          type: string
        error:
          $ref: "#/components/schemas/ApiErrorResponse"

    EligibilityWebsocketEvent:
      type: object
      required:
        - event_id
        - type
        - eligibility_id
        - state
        - created_at
      properties:
        event_id:
          type: string
        type:
          type: string
          enum:
            - eligibility
        eligibility_id:
          type: string
        state:
          $ref: "#/components/schemas/CardState"
        created_at:
          type: string
          format: date-time
        session_id:
          type: string
        error:
          $ref: "#/components/schemas/ApiErrorResponse"
        card_id:
          type: string

    ApiErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A message describing the error.
        type:
          type: string
          description: The type of error.
        code:
          type: number
          description: The error code.

    Address:
      type: object
      properties:
        address1:
          maxLength: 55
          minLength: 0
          type: string
          description: "Segment: N3, Element: N301, Notes: Required, Address Information"
          example: 123 address1
        address2:
          maxLength: 55
          minLength: 0
          type: string
          description: "Segment: N3, Element: N302, Notes: Address Information"
        city:
          maxLength: 30
          minLength: 0
          type: string
          description: "Segment: N4, Element: N401, Notes: Required, city"
          example: city1
        state:
          maxLength: 2
          minLength: 0
          type: string
          description: "Segment: N4, Element: N402, Notes: state example: TN, WA"
          example: wa
        postalCode:
          maxLength: 15
          minLength: 0
          type: string
          description: "Segment: N4, Element: N403"
          example: "981010000"
        countryCode:
          type: string
          description: "Segment: N4, Element: N404"
        locationIdentifier:
          type: string
          description: "Segment: N4, Element: N406"
        countrySubDivisionCode:
          type: string
          description: "Segment: N4, Element: N407, Notes: Country SubDivision Code"
      description: "Address: N3 and N4"
