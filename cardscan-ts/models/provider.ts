/* tslint:disable */
/* eslint-disable */
/**
 * CardScan API
 * The official documentation for the CardScan API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * Loop: 2100B, Segment: NM1, Notes: Information Receiver
 * @export
 * @interface Provider
 */
export interface Provider {
    /**
     * Loop: 2100B Segment: MN1, Element: NM103, Notes: NM101=PR when providerType=\'payer\' && payerId is present otherwise 1P for Provider, NM102=2 Non-Person Entity, organizationName 1-60 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'organizationName'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: NM104, Notes: NM101=PR when providerType=\'payer\' && payerId is present otherwise 1P for Provider, NM102=1 Person, firstName 1-35 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'firstName'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: NM103, Notes: NM101=PR when providerType=\'payer\' && payerId is present otherwise 1P for Provider, NM102=1 Person, lastName 1-60 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'lastName'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: NM109, Notes: NM108=XX Centers for Medicare and Medicaid Services National Provider Identifier 2-80 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'npi'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: NM109, Notes: NM108=SV Service Provider Number 2-80 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'serviceProviderNumber'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: NM109, Notes: NM101=PR when providerType=\'payer\' && payerId is present otherwise 1P for Provider, NM108=PI Payor Identification 2-80 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'payorId'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: NM109, Notes: NM108=FI Federal Taxpayer\'s Identification Number 2-80 alphanumeric characters
     * @type {string}
     * @memberof Provider
     */
    'taxId'?: string;
    /**
     * Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=34 Social Security Number
     * @type {string}
     * @memberof Provider
     */
    'ssn'?: string;
    /**
     * Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=PP Pharmacy Processor Number
     * @type {string}
     * @memberof Provider
     */
    'pharmacyProcessorNumber'?: string;
    /**
     * Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=XV Centers for Medicare and Medicaid Services PlanID
     * @type {string}
     * @memberof Provider
     */
    'servicesPlanID'?: string;
    /**
     * Loop: 2100B, Segment: NM1, Element: NM109 Notes: NM108=24 Employer\'s Identification Number
     * @type {string}
     * @memberof Provider
     */
    'employersId'?: string;
    /**
     * Loop: 2100B Segment: PRV, Element: PRV01, Notes: PRV02=PXC Allowed descriptions are: \'AD\' Admitting, \'AT\' Attending, \'BI\' Billing, \'CO\' Consulting, \'CV\' Covering, \'H\' Hospital, \'HH\' Home Health Care, \'LA\' Laboratory, \'OT\' Other Physician, \'P1\' Pharmacist, \'P2\' Pharmacy, \'PC\' Primary Care Physician, \'PE\' Performing, \'R\' Rural Health Clinic, \'RF\' Referring, \'SB\' Submitting, \'SK\' Skilled Nursing Facility, \'SU\' Supervising
     * @type {string}
     * @memberof Provider
     */
    'providerCode'?: ProviderProviderCodeEnum;
    /**
     * Loop: 2100B Segment: PRV, Element: PRV03, Notes: PRV02=PXC referenceIdentification and controlNumber into PRV03
     * @type {string}
     * @memberof Provider
     */
    'referenceIdentification'?: string;
    /**
     * Loop: 2100B Segment: MN1, Element: MN101, Notes: Allowed descriptions are: \'PR\' when providerType=\'payer\' && payerId is present, \'2B\' when providerType=\'third-party administrator\', \'36\' when providerType=\'employer\', \'80\' when providerType=\'hospital\', \'FA\' when providerType=\'facility\', \'GP\' when providerType=\'gateway provider\', \'P5\' when providerType=\'plan sponsor\', \'1P\' when providerType=\'provider\'
     * @type {string}
     * @memberof Provider
     */
    'providerType'?: ProviderProviderTypeEnum;
}

export const ProviderProviderCodeEnum = {
    Ad: 'AD',
    At: 'AT',
    Bi: 'BI',
    Co: 'CO',
    Cv: 'CV',
    H: 'H',
    Hh: 'HH',
    La: 'LA',
    Ot: 'OT',
    P1: 'P1',
    P2: 'P2',
    Pc: 'PC',
    Pe: 'PE',
    R: 'R',
    Rf: 'RF',
    Sb: 'SB',
    Sk: 'SK',
    Su: 'SU'
} as const;

export type ProviderProviderCodeEnum = typeof ProviderProviderCodeEnum[keyof typeof ProviderProviderCodeEnum];
export const ProviderProviderTypeEnum = {
    Payer: 'payer',
    ThirdPartyAdministrator: 'third-party administrator',
    Employer: 'employer',
    Hospital: 'hospital',
    Facility: 'facility',
    GatewayProvider: 'gateway provider',
    PlanSponsor: 'plan sponsor',
    Provider: 'provider'
} as const;

export type ProviderProviderTypeEnum = typeof ProviderProviderTypeEnum[keyof typeof ProviderProviderTypeEnum];


