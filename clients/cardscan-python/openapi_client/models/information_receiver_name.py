# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, constr
from openapi_client.models.address import Address

class InformationReceiverName(BaseModel):
    """
    Loop: 2100B, Notes: Information Receiver Name  # noqa: E501
    """
    state_licence_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="stateLicenceNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=0B State License Number")
    medicare_provider_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="medicareProviderNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1C Medicare Provider Number")
    medicaid_provider_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="medicaidProviderNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1D Medicaid Provider Number")
    facility_id_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="facilityIdNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1J Facility ID Number")
    contact_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="contactNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=CT Contact Number")
    device_pin_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="devicePinNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=EL Electronic Device Pin Number")
    submitter_id_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="submitterIdNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=EO Submitter Identification Number")
    national_provider_identifier: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="nationalProviderIdentifier", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=HPI Centers for Medicare and Medicaid Services National Provider Identifier")
    provider_plan_network_id_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="providerPlanNetworkIdNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=N5 Provider Plan Network Identification Number")
    facility_network_id_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="facilityNetworkIdNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=N7 Facility Network Identification Number")
    prior_identifier_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="priorIdentifierNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=Q4 Prior Identifier Number")
    social_security_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="socialSecurityNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number")
    federal_taxpayer_identification_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="federalTaxpayerIdentificationNumber", description="Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=TJ Federal Taxpayer's Identification Number")
    information_receiver_additional_identifier_state: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="informationReceiverAdditionalIdentifierState", description="Loop: 2100B, Segment: REF, Element: REF03, Notes: REF01=0B REF02=stateLicenceNumber Federal Taxpayer's Identification Number")
    address: Optional[Address] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["stateLicenceNumber", "medicareProviderNumber", "medicaidProviderNumber", "facilityIdNumber", "contactNumber", "devicePinNumber", "submitterIdNumber", "nationalProviderIdentifier", "providerPlanNetworkIdNumber", "facilityNetworkIdNumber", "priorIdentifierNumber", "socialSecurityNumber", "federalTaxpayerIdentificationNumber", "informationReceiverAdditionalIdentifierState", "address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InformationReceiverName:
        """Create an instance of InformationReceiverName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InformationReceiverName:
        """Create an instance of InformationReceiverName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InformationReceiverName.parse_obj(obj)

        _obj = InformationReceiverName.parse_obj({
            "state_licence_number": obj.get("stateLicenceNumber"),
            "medicare_provider_number": obj.get("medicareProviderNumber"),
            "medicaid_provider_number": obj.get("medicaidProviderNumber"),
            "facility_id_number": obj.get("facilityIdNumber"),
            "contact_number": obj.get("contactNumber"),
            "device_pin_number": obj.get("devicePinNumber"),
            "submitter_id_number": obj.get("submitterIdNumber"),
            "national_provider_identifier": obj.get("nationalProviderIdentifier"),
            "provider_plan_network_id_number": obj.get("providerPlanNetworkIdNumber"),
            "facility_network_id_number": obj.get("facilityNetworkIdNumber"),
            "prior_identifier_number": obj.get("priorIdentifierNumber"),
            "social_security_number": obj.get("socialSecurityNumber"),
            "federal_taxpayer_identification_number": obj.get("federalTaxpayerIdentificationNumber"),
            "information_receiver_additional_identifier_state": obj.get("informationReceiverAdditionalIdentifierState"),
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


