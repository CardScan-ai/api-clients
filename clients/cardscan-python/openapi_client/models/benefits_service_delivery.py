# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class BenefitsServiceDelivery(BaseModel):
    """
    BenefitsServiceDelivery  # noqa: E501
    """
    quantity_qualifier_code: Optional[StrictStr] = Field(None, alias="quantityQualifierCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD01")
    quantity_qualifier: Optional[StrictStr] = Field(None, alias="quantityQualifier", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD01, Notes: Description of the quantityQualifier Code")
    quantity: Optional[StrictStr] = Field(None, description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD02")
    unit_for_measurement_code: Optional[StrictStr] = Field(None, alias="unitForMeasurementCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD03, Notes: Description of the qualifier Code")
    sample_selection_modulus: Optional[StrictStr] = Field(None, alias="sampleSelectionModulus", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD04")
    time_period_qualifier_code: Optional[StrictStr] = Field(None, alias="timePeriodQualifierCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD05")
    time_period_qualifier: Optional[StrictStr] = Field(None, alias="timePeriodQualifier", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD05, Notes: Description of the timePeriodQualifier Code")
    num_of_periods: Optional[StrictStr] = Field(None, alias="numOfPeriods", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD06")
    delivery_or_calendar_pattern_code: Optional[StrictStr] = Field(None, alias="deliveryOrCalendarPatternCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD07, Notes: Description of the deliveryOrCalendarPatternQualifier Code")
    delivery_pattern_time_code: Optional[StrictStr] = Field(None, alias="deliveryPatternTimeCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD08")
    unit_for_measurement_qualifier_code: Optional[StrictStr] = Field(None, alias="unitForMeasurementQualifierCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD03")
    unit_for_measurement_qualifier: Optional[StrictStr] = Field(None, alias="unitForMeasurementQualifier", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD03, Notes: Description of the unitForMeasurementQualifier Code")
    delivery_or_calendar_pattern_qualifier_code: Optional[StrictStr] = Field(None, alias="deliveryOrCalendarPatternQualifierCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD07")
    delivery_or_calendar_pattern_qualifier: Optional[StrictStr] = Field(None, alias="deliveryOrCalendarPatternQualifier", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD07, Notes: Description of the deliveryOrCalendarPatternQualifier Code")
    delivery_pattern_time_qualifier_code: Optional[StrictStr] = Field(None, alias="deliveryPatternTimeQualifierCode", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD08")
    delivery_pattern_time_qualifier: Optional[StrictStr] = Field(None, alias="deliveryPatternTimeQualifier", description="Loop: 2110C and 2110D, Segment: HSD, Element: HSD08, Notes: Description of the deliveryPatternTimeQualifier Code")
    additional_properties: Dict[str, Any] = {}
    __properties = ["quantityQualifierCode", "quantityQualifier", "quantity", "unitForMeasurementCode", "sampleSelectionModulus", "timePeriodQualifierCode", "timePeriodQualifier", "numOfPeriods", "deliveryOrCalendarPatternCode", "deliveryPatternTimeCode", "unitForMeasurementQualifierCode", "unitForMeasurementQualifier", "deliveryOrCalendarPatternQualifierCode", "deliveryOrCalendarPatternQualifier", "deliveryPatternTimeQualifierCode", "deliveryPatternTimeQualifier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BenefitsServiceDelivery:
        """Create an instance of BenefitsServiceDelivery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BenefitsServiceDelivery:
        """Create an instance of BenefitsServiceDelivery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BenefitsServiceDelivery.parse_obj(obj)

        _obj = BenefitsServiceDelivery.parse_obj({
            "quantity_qualifier_code": obj.get("quantityQualifierCode"),
            "quantity_qualifier": obj.get("quantityQualifier"),
            "quantity": obj.get("quantity"),
            "unit_for_measurement_code": obj.get("unitForMeasurementCode"),
            "sample_selection_modulus": obj.get("sampleSelectionModulus"),
            "time_period_qualifier_code": obj.get("timePeriodQualifierCode"),
            "time_period_qualifier": obj.get("timePeriodQualifier"),
            "num_of_periods": obj.get("numOfPeriods"),
            "delivery_or_calendar_pattern_code": obj.get("deliveryOrCalendarPatternCode"),
            "delivery_pattern_time_code": obj.get("deliveryPatternTimeCode"),
            "unit_for_measurement_qualifier_code": obj.get("unitForMeasurementQualifierCode"),
            "unit_for_measurement_qualifier": obj.get("unitForMeasurementQualifier"),
            "delivery_or_calendar_pattern_qualifier_code": obj.get("deliveryOrCalendarPatternQualifierCode"),
            "delivery_or_calendar_pattern_qualifier": obj.get("deliveryOrCalendarPatternQualifier"),
            "delivery_pattern_time_qualifier_code": obj.get("deliveryPatternTimeQualifierCode"),
            "delivery_pattern_time_qualifier": obj.get("deliveryPatternTimeQualifier")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


