# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class MetaData(BaseModel):
    """
    Meta data about the response  # noqa: E501
    """
    sender_id: Optional[StrictStr] = Field(None, alias="senderId", description="Sender id assigned to this request")
    submitter_id: Optional[StrictStr] = Field(None, alias="submitterId", description="Submitter id assigned to this request")
    biller_id: Optional[StrictStr] = Field(None, alias="billerId", description="Billing id assigned to this request")
    application_mode: Optional[StrictStr] = Field(None, alias="applicationMode", description="Used by Change Healthcare to identify where this request can be found for support")
    trace_id: Optional[StrictStr] = Field(None, alias="traceId", description="Unique Id assigned to each request by Change Healthcare")
    outbound_trace_id: Optional[StrictStr] = Field(None, alias="outboundTraceId", description="BHT03 Value for submitterTransactionIdentifier")
    additional_properties: Dict[str, Any] = {}
    __properties = ["senderId", "submitterId", "billerId", "applicationMode", "traceId", "outboundTraceId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetaData:
        """Create an instance of MetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetaData:
        """Create an instance of MetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetaData.parse_obj(obj)

        _obj = MetaData.parse_obj({
            "sender_id": obj.get("senderId"),
            "submitter_id": obj.get("submitterId"),
            "biller_id": obj.get("billerId"),
            "application_mode": obj.get("applicationMode"),
            "trace_id": obj.get("traceId"),
            "outbound_trace_id": obj.get("outboundTraceId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


