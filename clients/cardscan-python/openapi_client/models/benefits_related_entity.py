# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.address import Address
from openapi_client.models.contact_information import ContactInformation
from openapi_client.models.provider_information import ProviderInformation

class BenefitsRelatedEntity(BaseModel):
    """
    BenefitsRelatedEntity  # noqa: E501
    """
    entity_identifier: Optional[StrictStr] = Field(None, alias="entityIdentifier", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM101, Notes: Entity Identifier Code")
    entity_type: Optional[StrictStr] = Field(None, alias="entityType", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM102, Notes: Entity Type Qualifier")
    entity_name: Optional[StrictStr] = Field(None, alias="entityName", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM103, Notes: Benefit Related Entity Last or Organization Name")
    entity_firstname: Optional[StrictStr] = Field(None, alias="entityFirstname", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM104, Notes: Name First")
    entity_middlename: Optional[StrictStr] = Field(None, alias="entityMiddlename", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM105, Notes: Name Middle")
    entity_suffix: Optional[StrictStr] = Field(None, alias="entitySuffix", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM107, Notes: Name Suffix")
    entity_identification: Optional[StrictStr] = Field(None, alias="entityIdentification", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM108, Notes: Identification Code Qualifier")
    entity_identification_value: Optional[StrictStr] = Field(None, alias="entityIdentificationValue", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM109, Notes: Benefit Related Entity Identifier")
    entity_relationship: Optional[StrictStr] = Field(None, alias="entityRelationship", description="Loop: 2120C and 2120D, Segments: NM1, Element: NM110, Notes: Entity Relationship Code")
    address: Optional[Address] = None
    contact_information: Optional[ContactInformation] = Field(None, alias="contactInformation")
    provider_information: Optional[ProviderInformation] = Field(None, alias="providerInformation")
    additional_properties: Dict[str, Any] = {}
    __properties = ["entityIdentifier", "entityType", "entityName", "entityFirstname", "entityMiddlename", "entitySuffix", "entityIdentification", "entityIdentificationValue", "entityRelationship", "address", "contactInformation", "providerInformation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BenefitsRelatedEntity:
        """Create an instance of BenefitsRelatedEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_information
        if self.contact_information:
            _dict['contactInformation'] = self.contact_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider_information
        if self.provider_information:
            _dict['providerInformation'] = self.provider_information.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BenefitsRelatedEntity:
        """Create an instance of BenefitsRelatedEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BenefitsRelatedEntity.parse_obj(obj)

        _obj = BenefitsRelatedEntity.parse_obj({
            "entity_identifier": obj.get("entityIdentifier"),
            "entity_type": obj.get("entityType"),
            "entity_name": obj.get("entityName"),
            "entity_firstname": obj.get("entityFirstname"),
            "entity_middlename": obj.get("entityMiddlename"),
            "entity_suffix": obj.get("entitySuffix"),
            "entity_identification": obj.get("entityIdentification"),
            "entity_identification_value": obj.get("entityIdentificationValue"),
            "entity_relationship": obj.get("entityRelationship"),
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "contact_information": ContactInformation.from_dict(obj.get("contactInformation")) if obj.get("contactInformation") is not None else None,
            "provider_information": ProviderInformation.from_dict(obj.get("providerInformation")) if obj.get("providerInformation") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


