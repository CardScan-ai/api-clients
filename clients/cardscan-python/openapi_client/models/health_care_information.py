# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class HealthCareInformation(BaseModel):
    """
    Loop: 2100C and 2100D, Segment: HI, Element: HI01-1 HI01-2, Notes: Health Care Diagnosis  # noqa: E501
    """
    diagnosis_type_code: Optional[StrictStr] = Field(None, alias="diagnosisTypeCode", description="Loop: 2100C and 2100D, Segment: HI, Element: HI01-1 , Notes: Diagnosis Type Code, Allowed descriptions are: 'BK' International Classification of Diseases Clinical Modification (ICD-9-CM) Principal Diagnosis, 'ABK' International Classification of Diseases Clinical Modification (ICD-10-CM) Principal Diagnosis, 'BF' International Classification of Diseases Clinical Modification (ICD-9-CM) Diagnosis, 'ABF' International Classification of Diseases Clinical Modification (ICD-10-CM) Diagnosis")
    diagnosis_code: Optional[constr(strict=True, max_length=30, min_length=0)] = Field(None, alias="diagnosisCode", description="Loop: 2100C and 2100D, Segment: HI, Element: HI01-2, Notes: Diagnosis Code")
    additional_properties: Dict[str, Any] = {}
    __properties = ["diagnosisTypeCode", "diagnosisCode"]

    @validator('diagnosis_type_code')
    def diagnosis_type_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BK', 'ABK', 'BF', 'ABF'):
            raise ValueError("must be one of enum values ('BK', 'ABK', 'BF', 'ABF')")
        return value

    @validator('diagnosis_code')
    def diagnosis_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HealthCareInformation:
        """Create an instance of HealthCareInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HealthCareInformation:
        """Create an instance of HealthCareInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HealthCareInformation.parse_obj(obj)

        _obj = HealthCareInformation.parse_obj({
            "diagnosis_type_code": obj.get("diagnosisTypeCode"),
            "diagnosis_code": obj.get("diagnosisCode")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


