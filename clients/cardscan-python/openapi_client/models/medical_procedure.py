# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

class MedicalProcedure(BaseModel):
    """
    Loop: 2110C and 2110D, Notes: Eligibility or Benefit Information, EQ02 and beyond only  # noqa: E501
    """
    product_or_service_id_qualifier: Optional[StrictStr] = Field(None, alias="productOrServiceIDQualifier", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-1, Notes: Composite Medical Procedure Identifier - Product or Service ID Qualifier, Allowed Values are: 'AD' American Dental Association Codes, 'CJ' Current Procedural Terminology (CPT) Codes, 'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes, 'ID' International Classification of Diseases, 9th Revision, Clinical Modification (ICD-9-CM) - Procedure, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code, 'N4' National Drug Code in 5-4-2 Format, 'ZZ' Mutually Defined")
    procedure_code: Optional[constr(strict=True, max_length=48, min_length=0)] = Field(None, alias="procedureCode", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-2, Notes: Composite Medical Procedure Identifier - Procedure Code")
    procedure_modifiers: Optional[conlist(StrictStr, max_items=4, min_items=0)] = Field(None, alias="procedureModifiers", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-3, Notes: Composite Medical Procedure Identifier - Procedure Modifier")
    diagnosis_code_pointer: Optional[conlist(StrictStr, max_items=4, min_items=0)] = Field(None, alias="diagnosisCodePointer", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ05, Notes: Composite Diagnosis Code Pointer")
    additional_properties: Dict[str, Any] = {}
    __properties = ["productOrServiceIDQualifier", "procedureCode", "procedureModifiers", "diagnosisCodePointer"]

    @validator('product_or_service_id_qualifier')
    def product_or_service_id_qualifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AD', 'CJ', 'HC', 'ID', 'IV', 'N4', 'ZZ'):
            raise ValueError("must be one of enum values ('AD', 'CJ', 'HC', 'ID', 'IV', 'N4', 'ZZ')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MedicalProcedure:
        """Create an instance of MedicalProcedure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MedicalProcedure:
        """Create an instance of MedicalProcedure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MedicalProcedure.parse_obj(obj)

        _obj = MedicalProcedure.parse_obj({
            "product_or_service_id_qualifier": obj.get("productOrServiceIDQualifier"),
            "procedure_code": obj.get("procedureCode"),
            "procedure_modifiers": obj.get("procedureModifiers"),
            "diagnosis_code_pointer": obj.get("diagnosisCodePointer")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


