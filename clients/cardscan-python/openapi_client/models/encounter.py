# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.medical_procedure import MedicalProcedure

class Encounter(BaseModel):
    """
    Loop: 2110C and 2110D, Notes: Eligibility or Benefit Information  # noqa: E501
    """
    beginning_date_of_service: Optional[StrictStr] = Field(None, alias="beginningDateOfService", description="Loop: 2100C and 2100D, Segment: DTP, Element: DTP03, Notes: DTP01=291 and DTP02=RD8, Date Expressed in Format YYYYMMDD.")
    end_date_of_service: Optional[StrictStr] = Field(None, alias="endDateOfService", description="Loop: 2100C and 2100D, Segment: DTP, Element: DTP03, Notes: DTP01=291 and DTP02=RD8, Date Expressed in Format YYYYMMDD.")
    date_of_service: Optional[StrictStr] = Field(None, alias="dateOfService", description="Loop: 2100C and 2100D, Segment: DTP, Element: DTP03, Notes: DTP01=291 and DTP02=D8, Date Expressed in Format YYYYMMDD.")
    service_type_codes: Optional[conlist(StrictStr, max_items=99, min_items=0)] = Field(None, alias="serviceTypeCodes", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ01, Notes: Service Type Codes, Allowed Values are: '1' Medical Care,'2' Surgical, '3' Consultation, '4' Diagnostic X-Ray, '5' Diagnostic Lab, '6' Radiation Therapy, '7' Anesthesia, '8' Surgical Assistance, '9' Other Medical, '10' Blood Charges, '11' Used Durable Medical Equipment, '12' Durable Medical Equipment Purchase, '13' Ambulatory Service Center Facility, '14' Renal Supplies in the Home, '15' Alternate Method Dialysis, '16' Chronic Renal Disease (CRD) Equipment, '17' Pre-Admission Testing, '18' Durable Medical Equipment Rental, '19' Pneumonia Vaccine, '20' Second Surgical Opinion, '21' Third Surgical Opinion, '22' Social Work, '23' Diagnostic Dental, '24' Periodontics, '25' Restorative, '26' Endodontics, '27' Maxillofacial Prosthetics, '28' Adjunctive Dental Services, '30' Health Benefit Plan Coverage, '32' Plan Waiting Period, '33' Chiropractic, '34' Chiropractic Office Visits, '35' Dental Care, '36' Dental Crowns, '37' Dental Accident, '38' Orthodontics, '39' Prosthodontics, '40' Oral Surgery, '41' Routine (Preventive) Dental, '42' Home Health Care, '43' Home Health Prescriptions, '44' Home Health Visits, '45' Hospice, '46' Respite Care, '47' Hospital, '48' Hospital - Inpatient, '49' Hospital - Room and Board, '50' Hospital - Outpatient, '51' Hospital - Emergency Accident, '52' Hospital - Emergency Medical, '53' Hospital - Ambulatory Surgical, '54' Long Term Care, '55' Major Medical, '56' Medically Related Transportation, '57' Air Transportation, '58' Cabulance, '59' Licensed Ambulance, '60' General Benefits, '61' In-vitro Fertilization, '62' MRI/CAT Scan, '63' Donor Procedures, '64' Acupuncture, '65' Newborn Care, '66' Pathology, '67' Smoking Cessation, '68' Well Baby Care, '69' Maternity, '70' Transplants, '71' Audiology Exam, '72' Inhalation Therapy, '73' Diagnostic Medical, '74' Private Duty Nursing, '75' Prosthetic Device, '76' Dialysis, '77' Otological Exam, '78' Chemotherapy, '79' Allergy Testing, '80' Immunizations, '81' Routine Physical, '82' Family Planning, '83' Infertility, '84' Abortion, '85' AIDS, '86' Emergency Services, '87' Cancer, '88' Pharmacy, '89' Free Standing Prescription Drug, '90' Mail Order Prescription Drug, '91' Brand Name Prescription Drug, '92' Generic Prescription Drug, '93' Podiatry, '94' Podiatry - Office Visits, '95' Podiatry - Nursing Home Visits, '96' Professional (Physician), '97' Anesthesiologist, '98' Professional (Physician) Visit - Office, '99' Professional (Physician) Visit - Inpatient, 'A0' Professional (Physician) Visit - Outpatient, 'A1' Professional (Physician) Visit - Nursing Home, 'A2' Professional (Physician) Visit - Skilled Nursing Facility, 'A3' Professional (Physician) Visit - Home, 'A4' Psychiatric, 'A5' Psychiatric - Room and Board, 'A6' Psychotherapy, 'A7' Psychiatric - Inpatient, 'A8' Psychiatric - Outpatient, 'A9' Rehabilitation, 'AA' Rehabilitation - Room and Board, 'AB' Rehabilitation - Inpatient, 'AC' Rehabilitation - Outpatient, 'AD' Occupational Therapy, 'AE' Physical Medicine, 'AF' Speech Therapy, 'AG' Skilled Nursing Care, 'AH' Skilled Nursing Care - Room and Board, 'AI' Substance Abuse, 'AJ' Alcoholism, 'AK' Drug Addiction, 'AL' Vision (Optometry), 'AM' Frames, 'AN' Routine Exam, 'AO' Lenses, 'AQ' Nonmedically Necessary Physical, 'AR' Experimental Drug Therapy, 'B1' Burn Care, 'B2' Brand Name Prescription Drug - Formulary, 'B3' Brand Name Prescription Drug - Non-Formulary, 'BA' Independent Medical Evaluation, 'BB' Partial Hospitalization (Psychiatric), 'BC' Day Care (Psychiatric), 'BD' Cognitive Therapy, 'BE' Massage Therapy, 'BF' Pulmonary Rehabilitation, 'BG' Cardiac Rehabilitation, 'BH' Pediatric, 'BI' Nursery, 'BJ' Skin, 'BK' Orthopedic, 'BL' Cardiac, 'BM' Lymphatic, 'BN' Gastrointestinal, 'BP' Endocrine, 'BQ' Neurology, 'BR' Eye, 'BS' Invasive Procedures, 'BT' Gynecological, 'BU' Obstetrical, 'BV' Obstetrical/Gynecological, 'BW' Mail Order Prescription Drug: Brand Name, 'BX' Mail Order Prescription Drug: Generic, 'BY' Physician Visit - Office: Sick, 'BZ' Physician Visit - Office: Well, 'C1' Coronary Care, 'CA' Private Duty Nursing - Inpatient, 'CB' Private Duty Nursing - Home, 'CC' Surgical Benefits - Professional (Physician), 'CD' Surgical Benefits - Facility, 'CE' Mental Health Provider - Inpatient, 'CF' Mental Health Provider - Outpatient, 'CG' Mental Health Facility - Inpatient, 'CH' Mental Health Facility - Outpatient, 'CI' Substance Abuse Facility - Inpatient, 'CJ' Substance Abuse Facility - Outpatient, 'CK' Screening X-ray, 'CL' Screening laboratory, 'CM' Mammogram, High Risk Patient, 'CN' Mammogram, Low Risk Patient, 'CO' Flu Vaccination, 'CP' Eyewear and Eyewear Accessories, 'CQ' Case Management, 'DG' Dermatology, 'DM' Durable Medical Equipment, 'DS' Diabetic Supplies, 'GF' Generic Prescription Drug - Formulary, 'GN' Generic Prescription Drug - Non-Formulary, 'GY' Allergy, 'IC' Intensive Care, 'MH' Mental Health, 'NI' Neonatal Intensive Care, 'ON' Oncology, 'PT' Physical Therapy, 'PU' Pulmonary, 'RN' Renal, 'RT' Residential Psychiatric Treatment, 'TC' Transitional Care, 'TN' Transitional Nursery Care, 'UC' Urgent Care")
    prior_authorization_or_referral_number: Optional[StrictStr] = Field(None, alias="priorAuthorizationOrReferralNumber", description="Loop: 2110C and 2110D, Segment: REF, Element: REF02, Notes: Prior Authorization or Referral Number")
    reference_identification_qualifier: Optional[StrictStr] = Field(None, alias="referenceIdentificationQualifier", description="Loop: 2110C and 2110D, Segment: REF, Element: REF01, Notes: Prior Authorization or Referral Number, Allowed Values are: '9F' Referral Number, 'G1' Prior Authorization Number")
    industry_code: Optional[StrictStr] = Field(None, alias="industryCode", description="Loop: 2110C and 2110D, Segment: III, Element: III02, Notes: III01=ZZ Industry Code, Allowed Values are: '01' Pharmacy, '02' Telehealth Provided Other than in Patient's Home, '03' School, '04' Homeless Shelter, '05' Indian Health Service Free-standing Facility, '06' Indian Health Service Provider-based Facility, '07' Tribal 638 Free-standing Facility, '08' Tribal 638 Provider-based Facility, '09' Prison/Correctional Facility, '10' Telehealth Provided in Patient's Home, '11' Office, '12' Home, '13' Assisted Living Facility, '14' Group Home, '15' Mobile Unit, '16' Temporary Lodging, '17' Walk-in Retail Health Clinic, '18' Place of Employment-Worksite, '19' Off Campus-Outpatient Hospital, '20' Urgent Care Facility, '21' Inpatient Hospital, '22' On Campus-Outpatient Hospital, '23' Emergency Room - Hospital, '24' Ambulatory Surgical Center, '25' Birthing Center, '26' Military Treatment Facility, '31' Skilled Nursing Facility, '32' Nursing Facility, '33' Custodial Care Facility, '34' Hospice, '41' Ambulance - Land, '42' Ambulance - Air or Water, '49' Independent Clinic, '50' Federally Qualified Health Center, '51' Inpatient Psychiatric Facility, '52' Psychiatric Facility - Partial Hospitalization, '53' Community Mental Health Center, '54' Intermediate Care Facility / Individuals with Intellectual Disabilities, '55' Residential Substance Abuse Treatment Facility, '56' Psychiatric Residential Treatment Center, '57' Non-residential Substance Abuse Treatment Facility, '58' Non-residential Opioid Treatment Facility, '60' Mass Immunization Center, '61' Comprehensive Inpatient Rehabilitation Facility, '62' Comprehensive Outpatient Rehabilitation Facility, '65' End-Stage Renal Disease Treatment Facility, '71' Public Health Clinic, '72' Rural Health Clinic, '81' Independent Laboratory, '99' Other Place of Service")
    product_or_service_id_qualifier: Optional[StrictStr] = Field(None, alias="productOrServiceIDQualifier", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-1, Notes: Composite Medical Procedure Identifier - Product or Service ID Qualifier, Allowed Values are: 'AD' American Dental Association Codes, 'CJ' Current Procedural Terminology (CPT) Codes, 'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes, 'ID' International Classification of Diseases, 9th Revision, Clinical Modification (ICD-9-CM) - Procedure, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code, 'N4' National Drug Code in 5-4-2 Format, 'ZZ' Mutually Defined")
    procedure_code: Optional[constr(strict=True, max_length=48, min_length=0)] = Field(None, alias="procedureCode", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-2, Notes: Composite Medical Procedure Identifier - Procedure Code")
    procedure_modifiers: Optional[conlist(StrictStr, max_items=4, min_items=0)] = Field(None, alias="procedureModifiers", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-3, Notes: Composite Medical Procedure Identifier - Procedure Modifier")
    diagnosis_code_pointer: Optional[conlist(StrictStr, max_items=4, min_items=0)] = Field(None, alias="diagnosisCodePointer", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ05, Notes: Composite Diagnosis Code Pointer")
    medical_procedures: Optional[conlist(MedicalProcedure, max_items=98, min_items=0)] = Field(None, alias="medicalProcedures", description="Loop: 2110C and 2110D, Segment: EQ, Element: EQ02-1-3, Notes: Composite Medical Procedure Identifier")
    additional_properties: Dict[str, Any] = {}
    __properties = ["beginningDateOfService", "endDateOfService", "dateOfService", "serviceTypeCodes", "priorAuthorizationOrReferralNumber", "referenceIdentificationQualifier", "industryCode", "productOrServiceIDQualifier", "procedureCode", "procedureModifiers", "diagnosisCodePointer", "medicalProcedures"]

    @validator('service_type_codes')
    def service_type_codes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '30', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'B1', 'B2', 'B3', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ', 'C1', 'CA', 'CB', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP', 'CQ', 'DG', 'DM', 'DS', 'GF', 'GN', 'GY', 'IC', 'MH', 'NI', 'ON', 'PT', 'PU', 'RN', 'RT', 'TC', 'TN', 'UC'):
                raise ValueError("each list item must be one of
        return value

    @validator('reference_identification_qualifier')
    def reference_identification_qualifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('9F', 'G1'):
            raise ValueError("must be one of enum values ('9F', 'G1')")
        return value

    @validator('industry_code')
    def industry_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '31', '32', '33', '34', '41', '42', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '60', '61', '62', '65', '71', '72', '81', '99'):
            raise ValueError("must be one of enum values ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '31', '32', '33', '34', '41', '42', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '60', '61', '62', '65', '71', '72', '81', '99')")
        return value

    @validator('product_or_service_id_qualifier')
    def product_or_service_id_qualifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AD', 'CJ', 'HC', 'ID', 'IV', 'N4', 'ZZ'):
            raise ValueError("must be one of enum values ('AD', 'CJ', 'HC', 'ID', 'IV', 'N4', 'ZZ')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Encounter:
        """Create an instance of Encounter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in medical_procedures (list)
        _items = []
        if self.medical_procedures:
            for _item in self.medical_procedures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['medicalProcedures'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Encounter:
        """Create an instance of Encounter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Encounter.parse_obj(obj)

        _obj = Encounter.parse_obj({
            "beginning_date_of_service": obj.get("beginningDateOfService"),
            "end_date_of_service": obj.get("endDateOfService"),
            "date_of_service": obj.get("dateOfService"),
            "service_type_codes": obj.get("serviceTypeCodes"),
            "prior_authorization_or_referral_number": obj.get("priorAuthorizationOrReferralNumber"),
            "reference_identification_qualifier": obj.get("referenceIdentificationQualifier"),
            "industry_code": obj.get("industryCode"),
            "product_or_service_id_qualifier": obj.get("productOrServiceIDQualifier"),
            "procedure_code": obj.get("procedureCode"),
            "procedure_modifiers": obj.get("procedureModifiers"),
            "diagnosis_code_pointer": obj.get("diagnosisCodePointer"),
            "medical_procedures": [MedicalProcedure.from_dict(_item) for _item in obj.get("medicalProcedures")] if obj.get("medicalProcedures") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


