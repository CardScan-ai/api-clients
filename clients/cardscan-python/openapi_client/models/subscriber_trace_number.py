# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class SubscriberTraceNumber(BaseModel):
    """
    SubscriberTraceNumber  # noqa: E501
    """
    trace_type_code: Optional[StrictStr] = Field(None, alias="traceTypeCode", description="Loop: 2100C and 2100D, Segment: TRN, Element: TRN01, Notes: Trace Type Code")
    trace_type: Optional[StrictStr] = Field(None, alias="traceType", description="Loop: 2100C and 2100D, Segment: TRN, Element: TRN01, Notes: Trace Type")
    reference_identification: Optional[StrictStr] = Field(None, alias="referenceIdentification", description="Loop: 2100C and 2100D, Segment: TRN, Element: TRN02, Notes: Reference Identification")
    originating_company_identifier: Optional[StrictStr] = Field(None, alias="originatingCompanyIdentifier", description="Loop: 2100C and 2100D, Segment: TRN, Element: TRN03, Notes: Originating Company Identifier")
    secondary_reference_identification: Optional[StrictStr] = Field(None, alias="secondaryReferenceIdentification", description="Loop: 2100C and 2100D, Segment: TRN, Element: TRN04, Notes: Originating Company Identifier")
    additional_properties: Dict[str, Any] = {}
    __properties = ["traceTypeCode", "traceType", "referenceIdentification", "originatingCompanyIdentifier", "secondaryReferenceIdentification"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriberTraceNumber:
        """Create an instance of SubscriberTraceNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriberTraceNumber:
        """Create an instance of SubscriberTraceNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriberTraceNumber.parse_obj(obj)

        _obj = SubscriberTraceNumber.parse_obj({
            "trace_type_code": obj.get("traceTypeCode"),
            "trace_type": obj.get("traceType"),
            "reference_identification": obj.get("referenceIdentification"),
            "originating_company_identifier": obj.get("originatingCompanyIdentifier"),
            "secondary_reference_identification": obj.get("secondaryReferenceIdentification")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


