# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, constr

class AdditionalIdentification(BaseModel):
    """
    Loop: 2100C and 2100D, Segment: REF Notes: Additional Identification  # noqa: E501
    """
    plan_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="planNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=18 Plan Number")
    policy_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="policyNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=1L Group or Policy Number")
    member_identification_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="memberIdentificationNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=1W Member Identification Number")
    contract_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="contractNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=CT Contract Number")
    medical_record_identification_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="medicalRecordIdentificationNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=EA Medical Record Identification Number")
    patient_account_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="patientAccountNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=EJ Patient Account Number")
    health_insurance_claim_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="healthInsuranceClaimNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=F6 Health Insurance (HIC) Number")
    identification_card_serial_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="identificationCardSerialNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=GH Identification Card Serial Number")
    insurance_policy_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="insurancePolicyNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=IG Insurance Policy Number")
    plan_network_identification_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="planNetworkIdentificationNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=N6 Plan Network Identification Number")
    agency_claim_number: Optional[constr(strict=True, max_length=50, min_length=0)] = Field(None, alias="agencyClaimNumber", description="Loop: 2100C and 2100D, Segment: REF, Element: REF02, Notes: REF01=Y4 Agency Claim Number")
    additional_properties: Dict[str, Any] = {}
    __properties = ["planNumber", "policyNumber", "memberIdentificationNumber", "contractNumber", "medicalRecordIdentificationNumber", "patientAccountNumber", "healthInsuranceClaimNumber", "identificationCardSerialNumber", "insurancePolicyNumber", "planNetworkIdentificationNumber", "agencyClaimNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdditionalIdentification:
        """Create an instance of AdditionalIdentification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdditionalIdentification:
        """Create an instance of AdditionalIdentification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdditionalIdentification.parse_obj(obj)

        _obj = AdditionalIdentification.parse_obj({
            "plan_number": obj.get("planNumber"),
            "policy_number": obj.get("policyNumber"),
            "member_identification_number": obj.get("memberIdentificationNumber"),
            "contract_number": obj.get("contractNumber"),
            "medical_record_identification_number": obj.get("medicalRecordIdentificationNumber"),
            "patient_account_number": obj.get("patientAccountNumber"),
            "health_insurance_claim_number": obj.get("healthInsuranceClaimNumber"),
            "identification_card_serial_number": obj.get("identificationCardSerialNumber"),
            "insurance_policy_number": obj.get("insurancePolicyNumber"),
            "plan_network_identification_number": obj.get("planNetworkIdentificationNumber"),
            "agency_claim_number": obj.get("agencyClaimNumber")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


