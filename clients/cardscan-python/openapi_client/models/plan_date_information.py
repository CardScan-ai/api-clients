# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class PlanDateInformation(BaseModel):
    """
    PlanDateInformation  # noqa: E501
    """
    discharge: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D or 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=096 Discharge")
    issue: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=102 issue")
    effective_date_of_change: Optional[StrictStr] = Field(None, alias="effectiveDateOfChange", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=152 effectiveDateOfChange")
    period_start: Optional[StrictStr] = Field(None, alias="periodStart", description="Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=193 periodStart")
    period_end: Optional[StrictStr] = Field(None, alias="periodEnd", description="Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=194 periodEnd")
    completion: Optional[StrictStr] = Field(None, description="Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=198 completion")
    coordination_of_benefits: Optional[StrictStr] = Field(None, alias="coordinationOfBenefits", description="Loop: 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=290 coordinationOfBenefits")
    plan: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D or 2110C and 2110D, Segments: DTP, Element: DTP03, Notes: DTP01=291 plan")
    benefit: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=292 benefit")
    primary_care_provider: Optional[StrictStr] = Field(None, alias="primaryCareProvider", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=295 primaryCareProvider")
    latest_visit_or_consultation: Optional[StrictStr] = Field(None, alias="latestVisitOrConsultation", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=304 latestVisitOrConsultation")
    eligibility: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=307 eligibility")
    added: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=318 added")
    cobra_begin: Optional[StrictStr] = Field(None, alias="cobraBegin", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=340 cobraBegin")
    cobra_end: Optional[StrictStr] = Field(None, alias="cobraEnd", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=341 cobraEnd")
    premium_paid_to_date_begin: Optional[StrictStr] = Field(None, alias="premiumPaidToDateBegin", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=342 premiumPaidToDateBegin")
    premium_paid_to_date_end: Optional[StrictStr] = Field(None, alias="premiumPaidToDateEnd", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=343 premiumPaidToDateEnd")
    plan_begin: Optional[StrictStr] = Field(None, alias="planBegin", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=346 planBegin")
    plan_end: Optional[StrictStr] = Field(None, alias="planEnd", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=347 planEnd")
    benefit_begin: Optional[StrictStr] = Field(None, alias="benefitBegin", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=348 benefitBegin")
    benefit_end: Optional[StrictStr] = Field(None, alias="benefitEnd", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=349 benefitEnd")
    eligibility_begin: Optional[StrictStr] = Field(None, alias="eligibilityBegin", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=356 eligibilityBegin")
    eligibility_end: Optional[StrictStr] = Field(None, alias="eligibilityEnd", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=357 eligibilityEnd")
    enrollment: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=382 enrollment")
    admission: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=435 admission")
    date_of_death: Optional[StrictStr] = Field(None, alias="dateOfDeath", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=442 dateOfDeath")
    certification: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=458 certification")
    service: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=472 service")
    policy_effective: Optional[StrictStr] = Field(None, alias="policyEffective", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=539 policyEffective")
    policy_expiration: Optional[StrictStr] = Field(None, alias="policyExpiration", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=540 policyExpiration")
    date_of_last_update: Optional[StrictStr] = Field(None, alias="dateOfLastUpdate", description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=636 dateOfLastUpdate")
    status: Optional[StrictStr] = Field(None, description="Loop: 2100C and 2100D, Segments: DTP, Element: DTP03, Notes: DTP01=771 status")
    additional_properties: Dict[str, Any] = {}
    __properties = ["discharge", "issue", "effectiveDateOfChange", "periodStart", "periodEnd", "completion", "coordinationOfBenefits", "plan", "benefit", "primaryCareProvider", "latestVisitOrConsultation", "eligibility", "added", "cobraBegin", "cobraEnd", "premiumPaidToDateBegin", "premiumPaidToDateEnd", "planBegin", "planEnd", "benefitBegin", "benefitEnd", "eligibilityBegin", "eligibilityEnd", "enrollment", "admission", "dateOfDeath", "certification", "service", "policyEffective", "policyExpiration", "dateOfLastUpdate", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanDateInformation:
        """Create an instance of PlanDateInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanDateInformation:
        """Create an instance of PlanDateInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanDateInformation.parse_obj(obj)

        _obj = PlanDateInformation.parse_obj({
            "discharge": obj.get("discharge"),
            "issue": obj.get("issue"),
            "effective_date_of_change": obj.get("effectiveDateOfChange"),
            "period_start": obj.get("periodStart"),
            "period_end": obj.get("periodEnd"),
            "completion": obj.get("completion"),
            "coordination_of_benefits": obj.get("coordinationOfBenefits"),
            "plan": obj.get("plan"),
            "benefit": obj.get("benefit"),
            "primary_care_provider": obj.get("primaryCareProvider"),
            "latest_visit_or_consultation": obj.get("latestVisitOrConsultation"),
            "eligibility": obj.get("eligibility"),
            "added": obj.get("added"),
            "cobra_begin": obj.get("cobraBegin"),
            "cobra_end": obj.get("cobraEnd"),
            "premium_paid_to_date_begin": obj.get("premiumPaidToDateBegin"),
            "premium_paid_to_date_end": obj.get("premiumPaidToDateEnd"),
            "plan_begin": obj.get("planBegin"),
            "plan_end": obj.get("planEnd"),
            "benefit_begin": obj.get("benefitBegin"),
            "benefit_end": obj.get("benefitEnd"),
            "eligibility_begin": obj.get("eligibilityBegin"),
            "eligibility_end": obj.get("eligibilityEnd"),
            "enrollment": obj.get("enrollment"),
            "admission": obj.get("admission"),
            "date_of_death": obj.get("dateOfDeath"),
            "certification": obj.get("certification"),
            "service": obj.get("service"),
            "policy_effective": obj.get("policyEffective"),
            "policy_expiration": obj.get("policyExpiration"),
            "date_of_last_update": obj.get("dateOfLastUpdate"),
            "status": obj.get("status")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


