# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.benefits_information import BenefitsInformation  # noqa: E501

class TestBenefitsInformation(unittest.TestCase):
    """BenefitsInformation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BenefitsInformation:
        """Test BenefitsInformation
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BenefitsInformation`
        """
        model = BenefitsInformation()  # noqa: E501
        if include_optional:
            return BenefitsInformation(
                code = '',
                name = '',
                coverage_level_code = '',
                coverage_level = '',
                service_type_codes = [
                    ''
                    ],
                service_types = [
                    ''
                    ],
                insurance_type_code = '',
                insurance_type = '',
                plan_coverage = '',
                time_qualifier_code = '',
                time_qualifier = '',
                benefit_amount = '',
                benefit_percent = '',
                quantity_qualifier_code = '',
                quantity_qualifier = '',
                benefit_quantity = '',
                auth_or_cert_indicator = '',
                in_plan_network_indicator_code = '',
                in_plan_network_indicator = '',
                header_loop_identifier_code = '',
                trailer_loop_identifier_code = '',
                composite_medical_procedure_identifier = openapi_client.models.composite_medical_procedure_identifier.CompositeMedicalProcedureIdentifier(
                    product_or_service_id_qualifier_code = '', 
                    product_or_service_id_qualifier = '', 
                    procedure_code = '', 
                    procedure_modifiers = [
                        ''
                        ], 
                    product_or_service_id = '', 
                    diagnosis_code_pointer = [
                        ''
                        ], ),
                benefits_additional_information = openapi_client.models.benefits_additional_information.BenefitsAdditionalInformation(
                    state_license_number = '', 
                    medicare_provider_number = '', 
                    medicaid_provider_number = '', 
                    facility_id_number = '', 
                    personal_identification_number = '', 
                    plan_number = '', 
                    policy_number = '', 
                    member_id = '', 
                    case_number = '', 
                    family_unit_number = '', 
                    group_number = '', 
                    referral_number = '', 
                    alternative_list_id = '', 
                    class_of_contract_code = '', 
                    coverage_list_id = '', 
                    contract_number = '', 
                    medical_record_identification_number = '', 
                    electronic_device_pin = '', 
                    submitter_identification_number = '', 
                    patient_account_number = '', 
                    hic_number = '', 
                    drug_formulary_number = '', 
                    prior_authorization_number = '', 
                    id_card_serial_number = '', 
                    id_card_number = '', 
                    centers_for_medicare_and_medicaid_services_npi = '', 
                    issue_number = '', 
                    insurance_policy_number = '', 
                    user_identification = '', 
                    medical_assistance_category = '', 
                    eligibility_category = '', 
                    plan_network_id_number = '', 
                    facility_network_identification_number = '', 
                    medicaid_recepient_id_number = '', 
                    prior_id_number = '', 
                    social_security_number = '', 
                    federal_taxpayers_identification_number = '', 
                    agency_claim_number = '', ),
                benefits_date_information = openapi_client.models.benefits_date_information.BenefitsDateInformation(
                    discharge = '', 
                    discharges = [
                        openapi_client.models.dtp_date.DtpDate(
                            date = '', 
                            start_date = '', 
                            end_date = '', )
                        ], 
                    issue = '', 
                    effective_date_of_change = '', 
                    period_start = '', 
                    period_end = '', 
                    completion = '', 
                    coordination_of_benefits = '', 
                    plan = '', 
                    benefit = '', 
                    primary_care_provider = '', 
                    latest_visit_or_consultation = '', 
                    eligibility = '', 
                    added = '', 
                    cobra_begin = '', 
                    cobra_end = '', 
                    premium_paidto_date_begin = '', 
                    premium_paid_to_date_end = '', 
                    plan_begin = '', 
                    plan_end = '', 
                    benefit_begin = '', 
                    benefit_end = '', 
                    eligibility_begin = '', 
                    eligibility_end = '', 
                    enrollment = '', 
                    admission = '', 
                    admissions = [
                        openapi_client.models.dtp_date.DtpDate(
                            date = '', 
                            start_date = '', 
                            end_date = '', )
                        ], 
                    date_of_death = '', 
                    certification = '', 
                    service = '', 
                    policy_effective = '', 
                    policy_expiration = '', 
                    date_of_last_update = '', 
                    status = '', ),
                benefits_related_entity = openapi_client.models.benefits_related_entity.BenefitsRelatedEntity(
                    entity_identifier = '', 
                    entity_type = '', 
                    entity_name = '', 
                    entity_firstname = '', 
                    entity_middlename = '', 
                    entity_suffix = '', 
                    entity_identification = '', 
                    entity_identification_value = '', 
                    entity_relationship = '', 
                    address = openapi_client.models.address.Address(
                        address1 = '123 address1', 
                        address2 = '', 
                        city = 'city1', 
                        state = 'wa', 
                        postal_code = '981010000', 
                        country_code = '', 
                        location_identifier = '', 
                        country_sub_division_code = '', ), 
                    contact_information = openapi_client.models.contact_information.ContactInformation(
                        name = '', 
                        contacts = [
                            openapi_client.models.contacts.Contacts(
                                communication_mode = '', 
                                communication_number = '', )
                            ], ), 
                    provider_information = openapi_client.models.provider_information.ProviderInformation(
                        provider_code = '', 
                        reference_identification = '', ), ),
                benefits_related_entities = [
                    openapi_client.models.benefits_related_entity.BenefitsRelatedEntity(
                        entity_identifier = '', 
                        entity_type = '', 
                        entity_name = '', 
                        entity_firstname = '', 
                        entity_middlename = '', 
                        entity_suffix = '', 
                        entity_identification = '', 
                        entity_identification_value = '', 
                        entity_relationship = '', 
                        address = openapi_client.models.address.Address(
                            address1 = '123 address1', 
                            address2 = '', 
                            city = 'city1', 
                            state = 'wa', 
                            postal_code = '981010000', 
                            country_code = '', 
                            location_identifier = '', 
                            country_sub_division_code = '', ), 
                        contact_information = openapi_client.models.contact_information.ContactInformation(
                            name = '', 
                            contacts = [
                                openapi_client.models.contacts.Contacts(
                                    communication_mode = '', 
                                    communication_number = '', )
                                ], ), 
                        provider_information = openapi_client.models.provider_information.ProviderInformation(
                            provider_code = '', 
                            reference_identification = '', ), )
                    ],
                benefits_service_delivery = [
                    openapi_client.models.benefits_service_delivery.BenefitsServiceDelivery(
                        quantity_qualifier_code = '', 
                        quantity_qualifier = '', 
                        quantity = '', 
                        unit_for_measurement_code = '', 
                        sample_selection_modulus = '', 
                        time_period_qualifier_code = '', 
                        time_period_qualifier = '', 
                        num_of_periods = '', 
                        delivery_or_calendar_pattern_code = '', 
                        delivery_pattern_time_code = '', 
                        unit_for_measurement_qualifier_code = '', 
                        unit_for_measurement_qualifier = '', 
                        delivery_or_calendar_pattern_qualifier_code = '', 
                        delivery_or_calendar_pattern_qualifier = '', 
                        delivery_pattern_time_qualifier_code = '', 
                        delivery_pattern_time_qualifier = '', )
                    ],
                additional_information = [
                    openapi_client.models.additional_information.AdditionalInformation(
                        description = '', )
                    ],
                eligibility_additional_information = openapi_client.models.eligibility_additional_information.EligibilityAdditionalInformation(
                    code_list_qualifier_code = '', 
                    industry_code = '', 
                    code_category = '', 
                    injured_body_part_name = '', ),
                eligibility_additional_information_list = [
                    openapi_client.models.eligibility_additional_information.EligibilityAdditionalInformation(
                        code_list_qualifier_code = '', 
                        industry_code = '', 
                        code_category = '', 
                        injured_body_part_name = '', )
                    ]
            )
        else:
            return BenefitsInformation(
        )
        """

    def testBenefitsInformation(self):
        """Test BenefitsInformation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
