# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from cardscan_client.models.eligibility_summarized_response import EligibilitySummarizedResponse  # noqa: E501

class TestEligibilitySummarizedResponse(unittest.TestCase):
    """EligibilitySummarizedResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EligibilitySummarizedResponse:
        """Test EligibilitySummarizedResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EligibilitySummarizedResponse`
        """
        model = EligibilitySummarizedResponse()  # noqa: E501
        if include_optional:
            return EligibilitySummarizedResponse(
                eligibility_request_id = '',
                subscriber_details = cardscan_client.models.subscriber_details.SubscriberDetails(
                    member_id = '', 
                    firstname = '', 
                    lastname = '', 
                    middlename = '', 
                    gender = '', 
                    address = cardscan_client.models.address.Address(
                        address1 = '123 address1', 
                        address2 = '', 
                        city = 'city1', 
                        state = 'wa', 
                        postal_code = '981010000', 
                        country_code = '', 
                        location_identifier = '', 
                        country_sub_division_code = '', ), 
                    dob = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                payer_details = cardscan_client.models.payer_details.PayerDetails(
                    payer_name = '', 
                    address = cardscan_client.models.address.Address(
                        address1 = '123 address1', 
                        address2 = '', 
                        city = 'city1', 
                        state = 'wa', 
                        postal_code = '981010000', 
                        country_code = '', 
                        location_identifier = '', 
                        country_sub_division_code = '', ), ),
                plan_details = cardscan_client.models.plan_details.PlanDetails(
                    plan_number = '', 
                    group_name = '', 
                    group_number = '', 
                    plan_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    plan_eligibility_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    plan_name = '', 
                    plan_active = True, ),
                coverage_summary = cardscan_client.models.coverage_summary.CoverageSummary(
                    individual_deductible_in_network = cardscan_client.models.deductible.Deductible(
                        total_amount = '', 
                        remaining_amount = '', ), 
                    individual_oop_in_network = cardscan_client.models.oop.OOP(
                        total_amount = '', 
                        remaining_amount = '', ), 
                    family_deductible_in_network = cardscan_client.models.deductible.Deductible(
                        total_amount = '', 
                        remaining_amount = '', ), 
                    family_oop_in_network = cardscan_client.models.oop.OOP(
                        total_amount = '', 
                        remaining_amount = '', ), ),
                chiropractic = cardscan_client.models.service.Service(
                    co_insurance_in_network = cardscan_client.models.co_insurance.CoInsurance(
                        amount = '', ), 
                    co_payment_in_network = cardscan_client.models.co_payment.CoPayment(
                        amount = '', ), 
                    service_code = '', ),
                emergency_room = cardscan_client.models.service.Service(
                    co_insurance_in_network = cardscan_client.models.co_insurance.CoInsurance(
                        amount = '', ), 
                    co_payment_in_network = cardscan_client.models.co_payment.CoPayment(
                        amount = '', ), 
                    service_code = '', ),
                office_visit = cardscan_client.models.service.Service(
                    co_insurance_in_network = cardscan_client.models.co_insurance.CoInsurance(
                        amount = '', ), 
                    co_payment_in_network = cardscan_client.models.co_payment.CoPayment(
                        amount = '', ), 
                    service_code = '', ),
                urgent_care = cardscan_client.models.service.Service(
                    co_insurance_in_network = cardscan_client.models.co_insurance.CoInsurance(
                        amount = '', ), 
                    co_payment_in_network = cardscan_client.models.co_payment.CoPayment(
                        amount = '', ), 
                    service_code = '', ),
                hospital_outpatient = cardscan_client.models.service.Service(
                    co_insurance_in_network = cardscan_client.models.co_insurance.CoInsurance(
                        amount = '', ), 
                    co_payment_in_network = cardscan_client.models.co_payment.CoPayment(
                        amount = '', ), 
                    service_code = '', )
            )
        else:
            return EligibilitySummarizedResponse(
        )
        """

    def testEligibilitySummarizedResponse(self):
        """Test EligibilitySummarizedResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
