/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: office_visit,specialist_visit,emergency_room,urgent_care,preventive_care,prescription,vision,dental,telemedicine,in_network_medical,out_of_network_medical,other
 */

@JsonClass(generateAdapter = false)
enum class CopayDeductibleService(val value: kotlin.String) {

    @Json(name = "office_visit")
    office_visit("office_visit"),

    @Json(name = "specialist_visit")
    specialist_visit("specialist_visit"),

    @Json(name = "emergency_room")
    emergency_room("emergency_room"),

    @Json(name = "urgent_care")
    urgent_care("urgent_care"),

    @Json(name = "preventive_care")
    preventive_care("preventive_care"),

    @Json(name = "prescription")
    prescription("prescription"),

    @Json(name = "vision")
    vision("vision"),

    @Json(name = "dental")
    dental("dental"),

    @Json(name = "telemedicine")
    telemedicine("telemedicine"),

    @Json(name = "in_network_medical")
    in_network_medical("in_network_medical"),

    @Json(name = "out_of_network_medical")
    out_of_network_medical("out_of_network_medical"),

    @Json(name = "other")
    other("other");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is CopayDeductibleService) "$data" else null

        /**
         * Returns a valid [CopayDeductibleService] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): CopayDeductibleService? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

