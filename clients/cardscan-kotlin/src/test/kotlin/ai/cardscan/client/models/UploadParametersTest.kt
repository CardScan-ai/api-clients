/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ai.cardscan.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ai.cardscan.client.models.UploadParameters

class UploadParametersTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UploadParameters
        //val modelInstance = UploadParameters()

        // to test the property `contentType` - The content type of the file
        should("test contentType") {
            // uncomment below to test the property
            //modelInstance.contentType shouldBe ("TODO")
        }

        // to test the property `contentDisposition` - The content disposition of the file
        should("test contentDisposition") {
            // uncomment below to test the property
            //modelInstance.contentDisposition shouldBe ("TODO")
        }

        // to test the property `xAmzMetaCardscanAccountId` - The account ID
        should("test xAmzMetaCardscanAccountId") {
            // uncomment below to test the property
            //modelInstance.xAmzMetaCardscanAccountId shouldBe ("TODO")
        }

        // to test the property `xAmzMetaCardscanCardId` - The card ID
        should("test xAmzMetaCardscanCardId") {
            // uncomment below to test the property
            //modelInstance.xAmzMetaCardscanCardId shouldBe ("TODO")
        }

        // to test the property `xAmzMetaCardscanScanId` - The scan ID
        should("test xAmzMetaCardscanScanId") {
            // uncomment below to test the property
            //modelInstance.xAmzMetaCardscanScanId shouldBe ("TODO")
        }

        // to test the property `key` - The key of the file
        should("test key") {
            // uncomment below to test the property
            //modelInstance.key shouldBe ("TODO")
        }

        // to test the property `xAmzAlgorithm` - The algorithm used to sign the request
        should("test xAmzAlgorithm") {
            // uncomment below to test the property
            //modelInstance.xAmzAlgorithm shouldBe ("TODO")
        }

        // to test the property `xAmzCredential` - The credential used to sign the request
        should("test xAmzCredential") {
            // uncomment below to test the property
            //modelInstance.xAmzCredential shouldBe ("TODO")
        }

        // to test the property `xAmzDate` - The date of the request
        should("test xAmzDate") {
            // uncomment below to test the property
            //modelInstance.xAmzDate shouldBe ("TODO")
        }

        // to test the property `xAmzSecurityToken` - The security token used to sign the request
        should("test xAmzSecurityToken") {
            // uncomment below to test the property
            //modelInstance.xAmzSecurityToken shouldBe ("TODO")
        }

        // to test the property `policy` - The policy used to sign the request
        should("test policy") {
            // uncomment below to test the property
            //modelInstance.policy shouldBe ("TODO")
        }

        // to test the property `xAmzSignature` - The signature used to sign the request
        should("test xAmzSignature") {
            // uncomment below to test the property
            //modelInstance.xAmzSignature shouldBe ("TODO")
        }

        // to test the property `xAmzMetaCardscanUserId` - The user ID
        should("test xAmzMetaCardscanUserId") {
            // uncomment below to test the property
            //modelInstance.xAmzMetaCardscanUserId shouldBe ("TODO")
        }

        // to test the property `xAmzMetaCardscanDeveloperUserId` - The developer user ID
        should("test xAmzMetaCardscanDeveloperUserId") {
            // uncomment below to test the property
            //modelInstance.xAmzMetaCardscanDeveloperUserId shouldBe ("TODO")
        }

    }
}
