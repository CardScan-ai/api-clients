/* tslint:disable */
/* eslint-disable */
/**
 * CardScan API
 * The official documentation for the CardScan API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import { Address } from "./address";
// May contain unused imports in some cases
// @ts-ignore
import { EligibilityApiError } from "./eligibility-api-error";
// May contain unused imports in some cases
// @ts-ignore
import { HealthCareDiagnosisCode } from "./health-care-diagnosis-code";
// May contain unused imports in some cases
// @ts-ignore
import { ResponseProvider } from "./response-provider";

/**
 * ResponseMember
 * @export
 * @interface ResponseMember
 */
export interface ResponseMember {
  /**
   *
   * @type {Array<HealthCareDiagnosisCode>}
   * @memberof ResponseMember
   */
  healthCareDiagnosisCodes?: Array<HealthCareDiagnosisCode>;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM109, Notes: NM108=MI Member Identification Number
   * @type {string}
   * @memberof ResponseMember
   */
  memberId?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM104, Notes: First Name
   * @type {string}
   * @memberof ResponseMember
   */
  firstName?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM103, Notes: Last Name
   * @type {string}
   * @memberof ResponseMember
   */
  lastName?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1 Element: NM105, Notes: Middle Name
   * @type {string}
   * @memberof ResponseMember
   */
  middleName?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM107, Notes: suffix
   * @type {string}
   * @memberof ResponseMember
   */
  suffix?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: DMG, Element: DMG03, Notes: gender
   * @type {string}
   * @memberof ResponseMember
   */
  gender?: ResponseMemberGenderEnum;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM101, Notes: entityIdentifier
   * @type {string}
   * @memberof ResponseMember
   */
  entityIdentifier?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM102, Notes: entityType
   * @type {string}
   * @memberof ResponseMember
   */
  entityType?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: NM1, Element: NM109, Notes: NM108=II uniqueHealthIdentifier
   * @type {string}
   * @memberof ResponseMember
   */
  uniqueHealthIdentifier?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: DMG, Element: DMG02, Notes: Date of Birth
   * @type {string}
   * @memberof ResponseMember
   */
  dateOfBirth?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI01, Notes: Information Status Code
   * @type {string}
   * @memberof ResponseMember
   */
  informationStatusCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI02, Notes: Employment Status Code
   * @type {string}
   * @memberof ResponseMember
   */
  employmentStatusCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI03, Notes: Government Service Affiliation Code
   * @type {string}
   * @memberof ResponseMember
   */
  governmentServiceAffiliationCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI04, Notes: Description
   * @type {string}
   * @memberof ResponseMember
   */
  description?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI05, Notes: Military Service Rank Code
   * @type {string}
   * @memberof ResponseMember
   */
  militaryServiceRankCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI06, Notes: Date Time Period Format Qualifier
   * @type {string}
   * @memberof ResponseMember
   */
  dateTimePeriodFormatQualifier?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI07, Notes: MPI06=D8 Date Time Period
   * @type {string}
   * @memberof ResponseMember
   */
  dateTimePeriod?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI08, Notes: MPI06=RD8 Date Time Period
   * @type {string}
   * @memberof ResponseMember
   */
  endDateTimePeriod?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: MPI, Element: MPI08, Notes: MPI06=RD8 Date Time Period
   * @type {string}
   * @memberof ResponseMember
   */
  startDateTimePeriod?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number
   * @type {string}
   * @memberof ResponseMember
   */
  ssn?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=6P Group Number
   * @type {string}
   * @memberof ResponseMember
   */
  groupNumber?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=18 Plan Number
   * @type {string}
   * @memberof ResponseMember
   */
  planNumber?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: REF, Element: REF02, Notes: REF01=N6 Plan Network Identification Number
   * @type {string}
   * @memberof ResponseMember
   */
  planNetworkIdNumber?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS02, Notes: Individual Relationship Code
   * @type {string}
   * @memberof ResponseMember
   */
  relationToSubscriber?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS02, Notes: Individual Relationship Code
   * @type {string}
   * @memberof ResponseMember
   */
  relationToSubscriberCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS01, Notes: Insured Indicator
   * @type {string}
   * @memberof ResponseMember
   */
  insuredIndicator?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS03, Notes: Maintenance Type Code
   * @type {string}
   * @memberof ResponseMember
   */
  maintenanceTypeCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS04, Notes: Maintenance Reason Code
   * @type {string}
   * @memberof ResponseMember
   */
  maintenanceReasonCode?: string;
  /**
   * Loop: 2000C, 2000D, 2100C, 2100D, Segment: INS, Element: INS17, Notes: Birth Sequence Number Use to indicate the birth order in the event of multiple births in association with the birth date supplied in DMG02
   * @type {string}
   * @memberof ResponseMember
   */
  birthSequenceNumber?: string;
  /**
   *
   * @type {Address}
   * @memberof ResponseMember
   */
  address?: Address;
  /**
   *
   * @type {ResponseProvider}
   * @memberof ResponseMember
   */
  responseProvider?: ResponseProvider;
  /**
   *
   * @type {Array<EligibilityApiError>}
   * @memberof ResponseMember
   */
  aaaErrors?: Array<EligibilityApiError>;
}

export const ResponseMemberGenderEnum = {
  M: "M",
  F: "F",
} as const;

export type ResponseMemberGenderEnum =
  (typeof ResponseMemberGenderEnum)[keyof typeof ResponseMemberGenderEnum];
