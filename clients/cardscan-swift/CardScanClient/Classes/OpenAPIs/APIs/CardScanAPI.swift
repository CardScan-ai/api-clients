//
// CardScanAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CardScanAPI {

    /**
     Creates a new card
     
     - parameter createCardRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCard(createCardRequest: CreateCardRequest? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: CardApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createCardWithRequestBuilder(createCardRequest: createCardRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a new card
     - POST /cards
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter createCardRequest: (body)  (optional)
     - returns: RequestBuilder<CardApiResponse> 
     */
    open class func createCardWithRequestBuilder(createCardRequest: CreateCardRequest? = nil) -> RequestBuilder<CardApiResponse> {
        let localVariablePath = "/cards"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCardRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CardApiResponse>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Eligibility Record
     
     - parameter createEligibilityRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createEligibility(createEligibilityRequest: CreateEligibilityRequest? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: EligibilityApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createEligibilityWithRequestBuilder(createEligibilityRequest: createEligibilityRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Eligibility Record
     - POST /eligibility
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter createEligibilityRequest: (body)  (optional)
     - returns: RequestBuilder<EligibilityApiResponse> 
     */
    open class func createEligibilityWithRequestBuilder(createEligibilityRequest: CreateEligibilityRequest? = nil) -> RequestBuilder<EligibilityApiResponse> {
        let localVariablePath = "/eligibility"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createEligibilityRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EligibilityApiResponse>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Card
     
     - parameter cardId: (path) The ID of the card 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteCardById(cardId: UUID, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteCardByIdWithRequestBuilder(cardId: cardId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Card
     - DELETE /cards/{card_id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter cardId: (path) The ID of the card 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCardByIdWithRequestBuilder(cardId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/cards/{card_id}"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CardScanClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Direct Upload
     
     - parameter orientation: (query)  
     - parameter captureType: (query)  
     - parameter cardId: (path)  
     - parameter directUploadRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func directUpload(orientation: ScanOrientation, captureType: ScanCaptureType, cardId: UUID, directUploadRequest: DirectUploadRequest? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: DirectUpload200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return directUploadWithRequestBuilder(orientation: orientation, captureType: captureType, cardId: cardId, directUploadRequest: directUploadRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Direct Upload
     - POST /cards/{card_id}/upload
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter orientation: (query)  
     - parameter captureType: (query)  
     - parameter cardId: (path)  
     - parameter directUploadRequest: (body)  (optional)
     - returns: RequestBuilder<DirectUpload200Response> 
     */
    open class func directUploadWithRequestBuilder(orientation: ScanOrientation, captureType: ScanCaptureType, cardId: UUID, directUploadRequest: DirectUploadRequest? = nil) -> RequestBuilder<DirectUpload200Response> {
        var localVariablePath = "/cards/{card_id}/upload"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: directUploadRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "orientation": (wrappedValue: orientation.encodeToJSON(), isExplode: true),
            "capture_type": (wrappedValue: captureType.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "image/jpeg",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DirectUpload200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Card - Generate Upload URL
     
     - parameter cardId: (path)  
     - parameter expiration: (query)  (optional, default to 3600)
     - parameter generateCardUploadUrlRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateCardUploadUrl(cardId: UUID, expiration: Int? = nil, generateCardUploadUrlRequest: GenerateCardUploadUrlRequest? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateCardUploadUrl200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return generateCardUploadUrlWithRequestBuilder(cardId: cardId, expiration: expiration, generateCardUploadUrlRequest: generateCardUploadUrlRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Card - Generate Upload URL
     - POST /cards/{card_id}/generate-upload-url
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter cardId: (path)  
     - parameter expiration: (query)  (optional, default to 3600)
     - parameter generateCardUploadUrlRequest: (body)  (optional)
     - returns: RequestBuilder<GenerateCardUploadUrl200Response> 
     */
    open class func generateCardUploadUrlWithRequestBuilder(cardId: UUID, expiration: Int? = nil, generateCardUploadUrlRequest: GenerateCardUploadUrlRequest? = nil) -> RequestBuilder<GenerateCardUploadUrl200Response> {
        var localVariablePath = "/cards/{card_id}/generate-upload-url"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateCardUploadUrlRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expiration": (wrappedValue: expiration?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateCardUploadUrl200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate Magic Link
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateMagicLink(apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateMagicLink200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return generateMagicLinkWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate Magic Link
     - GET /generate-magic-link
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GenerateMagicLink200Response> 
     */
    open class func generateMagicLinkWithRequestBuilder() -> RequestBuilder<GenerateMagicLink200Response> {
        let localVariablePath = "/generate-magic-link"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateMagicLink200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate an upload URL
     
     - parameter expiration: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateUploadUrl(expiration: Int, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateCardUploadUrl200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return generateUploadUrlWithRequestBuilder(expiration: expiration).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate an upload URL
     - GET /generate-upload-url
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter expiration: (query)  
     - returns: RequestBuilder<GenerateCardUploadUrl200Response> 
     */
    open class func generateUploadUrlWithRequestBuilder(expiration: Int) -> RequestBuilder<GenerateCardUploadUrl200Response> {
        let localVariablePath = "/generate-upload-url"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expiration": (wrappedValue: expiration.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateCardUploadUrl200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Access Token
     
     - parameter userId: (query) The ID of the user (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccessToken(userId: String? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAccessToken200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccessTokenWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Access Token
     - GET /access-token
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (query) The ID of the user (optional)
     - returns: RequestBuilder<GetAccessToken200Response> 
     */
    open class func getAccessTokenWithRequestBuilder(userId: String? = nil) -> RequestBuilder<GetAccessToken200Response> {
        let localVariablePath = "/access-token"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user_id": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAccessToken200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Card by ID
     
     - parameter cardId: (path) The ID of the card 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCardById(cardId: UUID, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: CardApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getCardByIdWithRequestBuilder(cardId: cardId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Card by ID
     - GET /cards/{card_id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter cardId: (path) The ID of the card 
     - returns: RequestBuilder<CardApiResponse> 
     */
    open class func getCardByIdWithRequestBuilder(cardId: UUID) -> RequestBuilder<CardApiResponse> {
        var localVariablePath = "/cards/{card_id}"
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CardApiResponse>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Eligibility
     
     - parameter eligibilityId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEligibilityById(eligibilityId: String, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: EligibilityApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getEligibilityByIdWithRequestBuilder(eligibilityId: eligibilityId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Eligibility
     - GET /eligibility/{eligibility_id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter eligibilityId: (path)  
     - returns: RequestBuilder<EligibilityApiResponse> 
     */
    open class func getEligibilityByIdWithRequestBuilder(eligibilityId: String) -> RequestBuilder<EligibilityApiResponse> {
        var localVariablePath = "/eligibility/{eligibility_id}"
        let eligibilityIdPreEscape = "\(APIHelper.mapValueToPathItem(eligibilityId))"
        let eligibilityIdPostEscape = eligibilityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eligibility_id}", with: eligibilityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EligibilityApiResponse>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Scan Metadata
     
     - parameter scanId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getScanMetadata(scanId: UUID, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getScanMetadataWithRequestBuilder(scanId: scanId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Scan Metadata
     - GET /scans/{scan_id}/metadata
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter scanId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getScanMetadataWithRequestBuilder(scanId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/scans/{scan_id}/metadata"
        let scanIdPreEscape = "\(APIHelper.mapValueToPathItem(scanId))"
        let scanIdPostEscape = scanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scan_id}", with: scanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = CardScanClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Cards
     
     - parameter limit: (query)  (optional)
     - parameter cursor: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listCards(limit: Int? = nil, cursor: String? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchCards200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return listCardsWithRequestBuilder(limit: limit, cursor: cursor).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Cards
     - GET /cards
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter limit: (query)  (optional)
     - parameter cursor: (query)  (optional)
     - returns: RequestBuilder<SearchCards200Response> 
     */
    open class func listCardsWithRequestBuilder(limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<SearchCards200Response> {
        let localVariablePath = "/cards"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "cursor": (wrappedValue: cursor?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchCards200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Eligibility
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listEligibility(apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListEligibility200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return listEligibilityWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Eligibility
     - GET /eligibility
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<ListEligibility200Response> 
     */
    open class func listEligibilityWithRequestBuilder() -> RequestBuilder<ListEligibility200Response> {
        let localVariablePath = "/eligibility"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListEligibility200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Cards (200) OK
     
     - parameter query: (query)  
     - parameter limit: (query)  (optional)
     - parameter cursor: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchCards(query: String, limit: Int? = nil, cursor: String? = nil, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchCards200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchCardsWithRequestBuilder(query: query, limit: limit, cursor: cursor).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Cards (200) OK
     - GET /cards/search
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter query: (query)  
     - parameter limit: (query)  (optional)
     - parameter cursor: (query)  (optional)
     - returns: RequestBuilder<SearchCards200Response> 
     */
    open class func searchCardsWithRequestBuilder(query: String, limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<SearchCards200Response> {
        let localVariablePath = "/cards/search"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "cursor": (wrappedValue: cursor?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchCards200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Validate Magic Link
     
     - parameter token: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func validateMagicLink(token: String, apiResponseQueue: DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: ValidateMagicLink200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return validateMagicLinkWithRequestBuilder(token: token).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Validate Magic Link
     - GET /validate-magic-link
     - parameter token: (query)  
     - returns: RequestBuilder<ValidateMagicLink200Response> 
     */
    open class func validateMagicLinkWithRequestBuilder(token: String) -> RequestBuilder<ValidateMagicLink200Response> {
        let localVariablePath = "/validate-magic-link"
        let localVariableURLString = CardScanClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ValidateMagicLink200Response>.Type = CardScanClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
