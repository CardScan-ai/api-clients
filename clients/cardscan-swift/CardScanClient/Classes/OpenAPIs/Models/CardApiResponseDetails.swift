//
// CardApiResponseDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CardApiResponseDetails: Codable, JSONEncodable, Hashable {

    public var groupNumber: MatchScore?
    public var memberNumber: MatchScore?
    public var payerName: MatchScore?
    public var rxBin: MatchScore?
    public var rxPcn: MatchScore?
    public var memberName: MatchScore?
    public var dependentNames: [MatchScore]?
    public var planName: MatchScore?
    public var planId: MatchScore?
    public var cardSpecificId: MatchScore?

    public init(groupNumber: MatchScore? = nil, memberNumber: MatchScore? = nil, payerName: MatchScore? = nil, rxBin: MatchScore? = nil, rxPcn: MatchScore? = nil, memberName: MatchScore? = nil, dependentNames: [MatchScore]? = nil, planName: MatchScore? = nil, planId: MatchScore? = nil, cardSpecificId: MatchScore? = nil) {
        self.groupNumber = groupNumber
        self.memberNumber = memberNumber
        self.payerName = payerName
        self.rxBin = rxBin
        self.rxPcn = rxPcn
        self.memberName = memberName
        self.dependentNames = dependentNames
        self.planName = planName
        self.planId = planId
        self.cardSpecificId = cardSpecificId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case groupNumber = "group_number"
        case memberNumber = "member_number"
        case payerName = "payer_name"
        case rxBin = "rx_bin"
        case rxPcn = "rx_pcn"
        case memberName = "member_name"
        case dependentNames = "dependent_names"
        case planName = "plan_name"
        case planId = "plan_id"
        case cardSpecificId = "card_specific_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(groupNumber, forKey: .groupNumber)
        try container.encodeIfPresent(memberNumber, forKey: .memberNumber)
        try container.encodeIfPresent(payerName, forKey: .payerName)
        try container.encodeIfPresent(rxBin, forKey: .rxBin)
        try container.encodeIfPresent(rxPcn, forKey: .rxPcn)
        try container.encodeIfPresent(memberName, forKey: .memberName)
        try container.encodeIfPresent(dependentNames, forKey: .dependentNames)
        try container.encodeIfPresent(planName, forKey: .planName)
        try container.encodeIfPresent(planId, forKey: .planId)
        try container.encodeIfPresent(cardSpecificId, forKey: .cardSpecificId)
    }
}

