//
// EligibilityError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EligibilityError: Codable, JSONEncodable, Hashable {

    /** The field that caused the error. */
    public var field: String?
    /** The error code. */
    public var code: String?
    /** A description of the error. */
    public var description: String?
    /** Suggested follow-up action for the error. */
    public var followupAction: String?
    /** The location of the error. */
    public var location: String?
    /** Possible resolutions for the error. */
    public var possibleResolutions: String?

    public init(field: String? = nil, code: String? = nil, description: String? = nil, followupAction: String? = nil, location: String? = nil, possibleResolutions: String? = nil) {
        self.field = field
        self.code = code
        self.description = description
        self.followupAction = followupAction
        self.location = location
        self.possibleResolutions = possibleResolutions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case field
        case code
        case description
        case followupAction = "followup_action"
        case location
        case possibleResolutions = "possible_resolutions"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(field, forKey: .field)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(followupAction, forKey: .followupAction)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(possibleResolutions, forKey: .possibleResolutions)
    }
}

