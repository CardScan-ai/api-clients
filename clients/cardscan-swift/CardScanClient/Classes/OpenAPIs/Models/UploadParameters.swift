//
// UploadParameters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UploadParameters: Codable, JSONEncodable, Hashable {

    /** The content type of the file */
    public var contentType: String
    /** The content disposition of the file */
    public var contentDisposition: String
    /** The account ID */
    public var xAmzMetaCardscanAccountId: String
    /** The card ID */
    public var xAmzMetaCardscanCardId: String
    /** The scan ID */
    public var xAmzMetaCardscanScanId: String
    /** The user ID */
    public var xAmzMetaCardscanUserId: String?
    /** The developer user ID */
    public var xAmzMetaCardscanDeveloperUserId: String?
    /** The key of the file */
    public var key: String
    /** The algorithm used to sign the request */
    public var xAmzAlgorithm: String
    /** The credential used to sign the request */
    public var xAmzCredential: String
    /** The date of the request */
    public var xAmzDate: String
    /** The security token used to sign the request */
    public var xAmzSecurityToken: String
    /** The policy used to sign the request */
    public var policy: String
    /** The signature used to sign the request */
    public var xAmzSignature: String

    public init(contentType: String, contentDisposition: String, xAmzMetaCardscanAccountId: String, xAmzMetaCardscanCardId: String, xAmzMetaCardscanScanId: String, xAmzMetaCardscanUserId: String? = nil, xAmzMetaCardscanDeveloperUserId: String? = nil, key: String, xAmzAlgorithm: String, xAmzCredential: String, xAmzDate: String, xAmzSecurityToken: String, policy: String, xAmzSignature: String) {
        self.contentType = contentType
        self.contentDisposition = contentDisposition
        self.xAmzMetaCardscanAccountId = xAmzMetaCardscanAccountId
        self.xAmzMetaCardscanCardId = xAmzMetaCardscanCardId
        self.xAmzMetaCardscanScanId = xAmzMetaCardscanScanId
        self.xAmzMetaCardscanUserId = xAmzMetaCardscanUserId
        self.xAmzMetaCardscanDeveloperUserId = xAmzMetaCardscanDeveloperUserId
        self.key = key
        self.xAmzAlgorithm = xAmzAlgorithm
        self.xAmzCredential = xAmzCredential
        self.xAmzDate = xAmzDate
        self.xAmzSecurityToken = xAmzSecurityToken
        self.policy = policy
        self.xAmzSignature = xAmzSignature
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentType = "Content-Type"
        case contentDisposition = "Content-Disposition"
        case xAmzMetaCardscanAccountId = "x-amz-meta-cardscan-account-id"
        case xAmzMetaCardscanCardId = "x-amz-meta-cardscan-card-id"
        case xAmzMetaCardscanScanId = "x-amz-meta-cardscan-scan-id"
        case xAmzMetaCardscanUserId = "x-amz-meta-cardscan-user-id"
        case xAmzMetaCardscanDeveloperUserId = "x-amz-meta-cardscan-developer-user-id"
        case key
        case xAmzAlgorithm = "x-amz-algorithm"
        case xAmzCredential = "x-amz-credential"
        case xAmzDate = "x-amz-date"
        case xAmzSecurityToken = "x-amz-security-token"
        case policy
        case xAmzSignature = "x-amz-signature"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(contentType, forKey: .contentType)
        try container.encode(contentDisposition, forKey: .contentDisposition)
        try container.encode(xAmzMetaCardscanAccountId, forKey: .xAmzMetaCardscanAccountId)
        try container.encode(xAmzMetaCardscanCardId, forKey: .xAmzMetaCardscanCardId)
        try container.encode(xAmzMetaCardscanScanId, forKey: .xAmzMetaCardscanScanId)
        try container.encodeIfPresent(xAmzMetaCardscanUserId, forKey: .xAmzMetaCardscanUserId)
        try container.encodeIfPresent(xAmzMetaCardscanDeveloperUserId, forKey: .xAmzMetaCardscanDeveloperUserId)
        try container.encode(key, forKey: .key)
        try container.encode(xAmzAlgorithm, forKey: .xAmzAlgorithm)
        try container.encode(xAmzCredential, forKey: .xAmzCredential)
        try container.encode(xAmzDate, forKey: .xAmzDate)
        try container.encode(xAmzSecurityToken, forKey: .xAmzSecurityToken)
        try container.encode(policy, forKey: .policy)
        try container.encode(xAmzSignature, forKey: .xAmzSignature)
    }
}

