//
// Address.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Address: Codable, JSONEncodable, Hashable {

    static let address1Rule = StringRule(minLength: 0, maxLength: 55, pattern: nil)
    static let address2Rule = StringRule(minLength: 0, maxLength: 55, pattern: nil)
    static let cityRule = StringRule(minLength: 0, maxLength: 30, pattern: nil)
    static let stateRule = StringRule(minLength: 0, maxLength: 2, pattern: nil)
    static let postalCodeRule = StringRule(minLength: 0, maxLength: 15, pattern: nil)
    public var address1: String?
    public var address2: String?
    public var city: String?
    public var state: String?
    public var postalCode: String?

    public init(address1: String? = nil, address2: String? = nil, city: String? = nil, state: String? = nil, postalCode: String? = nil) {
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.state = state
        self.postalCode = postalCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address1
        case address2
        case city
        case state
        case postalCode = "postal_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
    }
}

