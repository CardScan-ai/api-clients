//
// ScanMetadataVideoTrack.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Video track details */
public struct ScanMetadataVideoTrack: Codable, JSONEncodable, Hashable {

    public var aspectRatio: Double?
    public var deviceId: String?
    public var frameRate: Double?
    public var groupId: String?
    public var height: Int?
    public var resizeMode: String?
    public var width: Int?

    public init(aspectRatio: Double? = nil, deviceId: String? = nil, frameRate: Double? = nil, groupId: String? = nil, height: Int? = nil, resizeMode: String? = nil, width: Int? = nil) {
        self.aspectRatio = aspectRatio
        self.deviceId = deviceId
        self.frameRate = frameRate
        self.groupId = groupId
        self.height = height
        self.resizeMode = resizeMode
        self.width = width
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case aspectRatio
        case deviceId
        case frameRate
        case groupId
        case height
        case resizeMode
        case width
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(aspectRatio, forKey: .aspectRatio)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(frameRate, forKey: .frameRate)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(resizeMode, forKey: .resizeMode)
        try container.encodeIfPresent(width, forKey: .width)
    }
}

