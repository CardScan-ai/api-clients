//
// EligibilitySummarizedResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EligibilitySummarizedResponse: Codable, JSONEncodable, Hashable {

    /** The ID of the eligibility request. */
    public var eligibilityRequestId: UUID?
    public var subscriberDetails: SubscriberDetails?
    public var payerDetails: PayerDetails?
    public var planDetails: PlanDetails?
    public var coverageSummary: CoverageSummary?
    public var chiropractic: Service?
    public var emergencyRoom: Service?
    public var officeVisit: Service?
    public var urgentCare: Service?
    public var hospitalOutpatient: Service?

    public init(eligibilityRequestId: UUID? = nil, subscriberDetails: SubscriberDetails? = nil, payerDetails: PayerDetails? = nil, planDetails: PlanDetails? = nil, coverageSummary: CoverageSummary? = nil, chiropractic: Service? = nil, emergencyRoom: Service? = nil, officeVisit: Service? = nil, urgentCare: Service? = nil, hospitalOutpatient: Service? = nil) {
        self.eligibilityRequestId = eligibilityRequestId
        self.subscriberDetails = subscriberDetails
        self.payerDetails = payerDetails
        self.planDetails = planDetails
        self.coverageSummary = coverageSummary
        self.chiropractic = chiropractic
        self.emergencyRoom = emergencyRoom
        self.officeVisit = officeVisit
        self.urgentCare = urgentCare
        self.hospitalOutpatient = hospitalOutpatient
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eligibilityRequestId = "eligibility_request_id"
        case subscriberDetails = "subscriber_details"
        case payerDetails = "payer_details"
        case planDetails = "plan_details"
        case coverageSummary = "coverage_summary"
        case chiropractic
        case emergencyRoom = "emergency_room"
        case officeVisit = "office_visit"
        case urgentCare = "urgent_care"
        case hospitalOutpatient = "hospital_outpatient"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eligibilityRequestId, forKey: .eligibilityRequestId)
        try container.encodeIfPresent(subscriberDetails, forKey: .subscriberDetails)
        try container.encodeIfPresent(payerDetails, forKey: .payerDetails)
        try container.encodeIfPresent(planDetails, forKey: .planDetails)
        try container.encodeIfPresent(coverageSummary, forKey: .coverageSummary)
        try container.encodeIfPresent(chiropractic, forKey: .chiropractic)
        try container.encodeIfPresent(emergencyRoom, forKey: .emergencyRoom)
        try container.encodeIfPresent(officeVisit, forKey: .officeVisit)
        try container.encodeIfPresent(urgentCare, forKey: .urgentCare)
        try container.encodeIfPresent(hospitalOutpatient, forKey: .hospitalOutpatient)
    }
}

