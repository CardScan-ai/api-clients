//
// EligibilityWebsocketEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EligibilityWebsocketEvent: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case eligibility = "eligibility"
    }
    public var eventId: String
    public var type: ModelType
    public var eligibilityId: UUID
    public var state: CardState
    public var createdAt: Date
    public var sessionId: String?
    public var error: WebsocketError?
    public var cardId: UUID?

    public init(eventId: String, type: ModelType, eligibilityId: UUID, state: CardState, createdAt: Date, sessionId: String? = nil, error: WebsocketError? = nil, cardId: UUID? = nil) {
        self.eventId = eventId
        self.type = type
        self.eligibilityId = eligibilityId
        self.state = state
        self.createdAt = createdAt
        self.sessionId = sessionId
        self.error = error
        self.cardId = cardId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case type
        case eligibilityId = "eligibility_id"
        case state
        case createdAt = "created_at"
        case sessionId = "session_id"
        case error
        case cardId = "card_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(type, forKey: .type)
        try container.encode(eligibilityId, forKey: .eligibilityId)
        try container.encode(state, forKey: .state)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(cardId, forKey: .cardId)
    }
}

