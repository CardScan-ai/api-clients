//
// WebhookEligibilityDeletedEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Triggered when an eligibility record is deleted. */
public struct WebhookEligibilityDeletedEvent: Codable, JSONEncodable, Hashable {

    /** Unique identifier for the eligibility record. */
    public var eligibilityId: UUID
    /** Unique identifier for the associated card. */
    public var cardId: UUID
    /** Timestamp for when the eligibility record was created. */
    public var createdAt: Date
    /** Flag indicating whether the eligibility record is deleted. */
    public var deleted: Bool
    /** Unique identifier for the session. */
    public var sessionId: String
    /** Type of event. */
    public var type: String
    /** Timestamp for the last update. */
    public var updatedAt: Date
    /** Identifier for the user associated with the event. */
    public var userId: String

    public init(eligibilityId: UUID, cardId: UUID, createdAt: Date, deleted: Bool, sessionId: String, type: String, updatedAt: Date, userId: String) {
        self.eligibilityId = eligibilityId
        self.cardId = cardId
        self.createdAt = createdAt
        self.deleted = deleted
        self.sessionId = sessionId
        self.type = type
        self.updatedAt = updatedAt
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eligibilityId = "eligibility_id"
        case cardId = "card_id"
        case createdAt = "created_at"
        case deleted
        case sessionId = "session_id"
        case type
        case updatedAt = "updated_at"
        case userId = "user_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eligibilityId, forKey: .eligibilityId)
        try container.encode(cardId, forKey: .cardId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(deleted, forKey: .deleted)
        try container.encode(sessionId, forKey: .sessionId)
        try container.encode(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(userId, forKey: .userId)
    }
}

