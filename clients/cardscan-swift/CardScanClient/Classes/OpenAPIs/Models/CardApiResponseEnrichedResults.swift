//
// CardApiResponseEnrichedResults.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Enriched data extracted from the insurance card using AI processing */
public struct CardApiResponseEnrichedResults: Codable, JSONEncodable, Hashable {

    public enum ProcessedSides: String, Codable, CaseIterable {
        case frontOnly = "front_only"
        case both = "both"
    }
    public var addresses: [EnrichedAddressResultInner]?
    public var phoneNumbers: [EnrichedPhoneNumberResultInner]?
    public var copaysDeductibles: [EnrichedCopayResultInner]?
    /** Indicates which sides of the card were processed */
    public var processedSides: ProcessedSides?

    public init(addresses: [EnrichedAddressResultInner]? = nil, phoneNumbers: [EnrichedPhoneNumberResultInner]? = nil, copaysDeductibles: [EnrichedCopayResultInner]? = nil, processedSides: ProcessedSides? = nil) {
        self.addresses = addresses
        self.phoneNumbers = phoneNumbers
        self.copaysDeductibles = copaysDeductibles
        self.processedSides = processedSides
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addresses
        case phoneNumbers = "phone_numbers"
        case copaysDeductibles = "copays_deductibles"
        case processedSides = "processed_sides"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(addresses, forKey: .addresses)
        try container.encodeIfPresent(phoneNumbers, forKey: .phoneNumbers)
        try container.encodeIfPresent(copaysDeductibles, forKey: .copaysDeductibles)
        try container.encodeIfPresent(processedSides, forKey: .processedSides)
    }
}

