//
// EligibilityApiResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EligibilityApiResponse: Codable, JSONEncodable, Hashable {

    public enum State: String, Codable, CaseIterable {
        case completed = "completed"
        case processing = "processing"
        case error = "error"
    }
    /** The ID of the eligibility record. */
    public var eligibilityId: String
    /** The state of the eligibility record. */
    public var state: State
    /** The ID of the card. */
    public var cardId: String
    public var eligibilityRequest: EligibilityApiResponseEligibilityRequest?
    /** The eligibility raw response. */
    public var eligibilityResponse: [String: AnyCodable]?
    public var eligibilitySummarizedResponse: EligibilitySummarizedResponse?
    public var error: ModelError?
    /** The timestamp when the eligibility record was created. */
    public var createdAt: Date

    public init(eligibilityId: String, state: State, cardId: String, eligibilityRequest: EligibilityApiResponseEligibilityRequest? = nil, eligibilityResponse: [String: AnyCodable]? = nil, eligibilitySummarizedResponse: EligibilitySummarizedResponse? = nil, error: ModelError? = nil, createdAt: Date) {
        self.eligibilityId = eligibilityId
        self.state = state
        self.cardId = cardId
        self.eligibilityRequest = eligibilityRequest
        self.eligibilityResponse = eligibilityResponse
        self.eligibilitySummarizedResponse = eligibilitySummarizedResponse
        self.error = error
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eligibilityId = "eligibility_id"
        case state
        case cardId = "card_id"
        case eligibilityRequest = "eligibility_request"
        case eligibilityResponse = "eligibility_response"
        case eligibilitySummarizedResponse = "eligibility_summarized_response"
        case error
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eligibilityId, forKey: .eligibilityId)
        try container.encode(state, forKey: .state)
        try container.encode(cardId, forKey: .cardId)
        try container.encodeIfPresent(eligibilityRequest, forKey: .eligibilityRequest)
        try container.encodeIfPresent(eligibilityResponse, forKey: .eligibilityResponse)
        try container.encodeIfPresent(eligibilitySummarizedResponse, forKey: .eligibilitySummarizedResponse)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encode(createdAt, forKey: .createdAt)
    }
}

