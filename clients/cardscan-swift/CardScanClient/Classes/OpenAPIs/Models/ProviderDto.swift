//
// ProviderDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A valid provider record must include either an &#x60;organization_name&#x60; or both a &#x60;first_name&#x60; and &#x60;last_name&#x60;.  The &#x60;npi&#x60; must always be exactly 10 numeric digits.  */
public struct ProviderDto: Codable, JSONEncodable, Hashable {

    static let firstNameRule = StringRule(minLength: 1, maxLength: 35, pattern: nil)
    static let lastNameRule = StringRule(minLength: 1, maxLength: 60, pattern: nil)
    static let npiRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d{10}$/")
    static let organizationNameRule = StringRule(minLength: 0, maxLength: 60, pattern: nil)
    /** The provider's first name. Required if `organization_name` is not provided.  Must contain 1-35 alphanumeric characters.   */
    public var firstName: String?
    /** The provider's last name. Required if `organization_name` is not provided.  Must contain 1-60 alphanumeric characters.  */
    public var lastName: String?
    /** The National Provider Identifier (NPI), assigned by the Centers for Medicare & Medicaid Services.  This identifier is always a 10-digit numeric value.  Use the [NPI Registry](https://npiregistry.cms.hhs.gov/search) to verify or look up NPI details.  */
    public var npi: String
    /** The name of the provider's organization. Required if both `first_name` and `last_name` are not provided.  Must contain up to 60 characters.  */
    public var organizationName: String?

    public init(firstName: String? = nil, lastName: String? = nil, npi: String, organizationName: String? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.npi = npi
        self.organizationName = organizationName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName = "first_name"
        case lastName = "last_name"
        case npi
        case organizationName = "organization_name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encode(npi, forKey: .npi)
        try container.encodeIfPresent(organizationName, forKey: .organizationName)
    }
}

