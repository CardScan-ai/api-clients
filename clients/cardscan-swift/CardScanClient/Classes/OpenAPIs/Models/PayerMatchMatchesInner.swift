//
// PayerMatchMatchesInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PayerMatchMatchesInner: Codable, JSONEncodable, Hashable {

    public enum TransactionType: String, Codable, CaseIterable {
        case professional = "professional"
        case institutional = "institutional"
        case dental = "dental"
        case workerscomp = "workerscomp"
    }
    public var clearinghouse: String?
    public var payerId: String?
    public var payerName: String?
    public var score: String?
    public var cardscanPayerId: String?
    public var transactionType: TransactionType?
    public var metadata: PayerMatchMatchesInnerMetadata?

    public init(clearinghouse: String? = nil, payerId: String? = nil, payerName: String? = nil, score: String? = nil, cardscanPayerId: String? = nil, transactionType: TransactionType? = nil, metadata: PayerMatchMatchesInnerMetadata? = nil) {
        self.clearinghouse = clearinghouse
        self.payerId = payerId
        self.payerName = payerName
        self.score = score
        self.cardscanPayerId = cardscanPayerId
        self.transactionType = transactionType
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clearinghouse
        case payerId = "payer_id"
        case payerName = "payer_name"
        case score
        case cardscanPayerId = "cardscan_payer_id"
        case transactionType = "transaction_type"
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clearinghouse, forKey: .clearinghouse)
        try container.encodeIfPresent(payerId, forKey: .payerId)
        try container.encodeIfPresent(payerName, forKey: .payerName)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encodeIfPresent(cardscanPayerId, forKey: .cardscanPayerId)
        try container.encodeIfPresent(transactionType, forKey: .transactionType)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}

