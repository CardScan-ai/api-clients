//
// PlanDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlanDetails: Codable, JSONEncodable, Hashable {

    /** The plan number. */
    public var planNumber: String?
    /** The name of the group associated with the plan. */
    public var groupName: String?
    /** The group number. */
    public var groupNumber: String?
    /** The start date of the plan. */
    public var planStartDate: Date?
    /** The eligibility start date of the plan. */
    public var planEligibilityStartDate: Date?
    /** The name of the plan. */
    public var planName: String?
    /** Indicates whether the plan is active. */
    public var planActive: Bool?

    public init(planNumber: String? = nil, groupName: String? = nil, groupNumber: String? = nil, planStartDate: Date? = nil, planEligibilityStartDate: Date? = nil, planName: String? = nil, planActive: Bool? = nil) {
        self.planNumber = planNumber
        self.groupName = groupName
        self.groupNumber = groupNumber
        self.planStartDate = planStartDate
        self.planEligibilityStartDate = planEligibilityStartDate
        self.planName = planName
        self.planActive = planActive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case planNumber = "plan_number"
        case groupName = "group_name"
        case groupNumber = "group_number"
        case planStartDate = "plan_start_date"
        case planEligibilityStartDate = "plan_eligibility_start_date"
        case planName = "plan_name"
        case planActive = "plan_active"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(planNumber, forKey: .planNumber)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(groupNumber, forKey: .groupNumber)
        try container.encodeIfPresent(planStartDate, forKey: .planStartDate)
        try container.encodeIfPresent(planEligibilityStartDate, forKey: .planEligibilityStartDate)
        try container.encodeIfPresent(planName, forKey: .planName)
        try container.encodeIfPresent(planActive, forKey: .planActive)
    }
}

